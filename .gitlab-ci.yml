# CICD - Reload with /api/ensembl_object endpoint
stages:
  - test_build_static
  - build_docker_images
  - deploy

variables:
  STAGE_IMAGE_TAG: stage-${CI_COMMIT_SHORT_SHA}
  PROD_IMAGE_TAG: prod-${CI_COMMIT_SHORT_SHA}
  CONTAINER_STAGE_IMAGE: $GITLAB_REGISTRY_URL/$GITLAB_REGISTRY_NAMESPACE/ensembl-client:${STAGE_IMAGE_TAG}
  CONTAINER_PROD_IMAGE: $GITLAB_REGISTRY_URL/$GITLAB_REGISTRY_NAMESPACE/ensembl-client:${PROD_IMAGE_TAG}
  KUBECONFIG: /etc/deploy/config

Test & Build:
  image: node:10.15.1
  stage: test_build_static

  before_script:
  - cd src/ensembl
  - npm ci

  script:
  - npm run test
  - export NODE_ENV=production
  - export API_HOST=''
  - npm run build

  artifacts:
    name: static_assets
    paths:
    - src/ensembl/dist/

  only:
  - cicd-test

Nginx:
  image: docker
  
  services:
    - docker:dind
  
  stage: build_docker_images

  script:
  - apk update && apk add git
  - git clone --depth 1 https://github.com/Ensembl/ensembl-2020-static-assests.git
  - git clone --depth 1 https://gitlab.ebi.ac.uk/kamal/ensembl-client-nginx.git
  - docker build -t ${CONTAINER_STAGE_IMAGE} -f ensembl-client-nginx/Dockerfile --no-cache .
  - docker build -t ${CONTAINER_PROD_IMAGE} -f ensembl-client-nginx/Dockerfile.prod --no-cache .
  - echo "$GITLAB_REGISTRY_TOKEN" | docker login -u "$GITLAB_REGISTRY_USER" --password-stdin https://"$GITLAB_REGISTRY_URL"
  - docker push ${CONTAINER_STAGE_IMAGE}
  - docker push ${CONTAINER_PROD_IMAGE}
  - docker rmi ${CONTAINER_STAGE_IMAGE}
  - docker rmi ${CONTAINER_PROD_IMAGE}
  - docker logout "$GITLAB_REGISTRY_URL"

  only:
  - cicd-test

Staging:
  stage: deploy
  image: alpine
  only:
  - cicd-test
  before_script:
  - mkdir -p /etc/deploy
  - echo ${EMBASSY_KUBECONFIG} | base64 -d > ${KUBECONFIG}
  script:
  - apk update && apk add --no-cache curl git
  - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
  - chmod +x ./kubectl
  - mv ./kubectl /usr/local/bin/kubectl
  - git clone https://gitlab.ebi.ac.uk/kamal/ensembl-client-caas-deploy.git
  - cd ensembl-client-caas-deploy
  - git checkout refactor-manifest
  - cd ..
  - sed -i "s/<VERSION>/${STAGE_IMAGE_TAG}/g" ensembl-client-caas-deploy/ensembl_client_deployment.yaml
  - sed -i "s/<DEPLOYMNET_ENV>/staging/g" ensembl-client-caas-deploy/ensembl_client_deployment.yaml
  - cat ensembl-client-caas-deploy/ensembl_client_deployment.yaml
  - kubectl config view
  - kubectl config use-context ens-stage-ctx
  - kubectl apply -f ensembl-client-caas-deploy/ensembl_client_deployment.yaml

Live:
  stage: deploy
  image: alpine
  only:
  - cicd-test
  before_script:
  - mkdir -p /etc/deploy
  - echo ${EMBASSY_KUBECONFIG} | base64 -d > ${KUBECONFIG}
  script:
  - apk update && apk add --no-cache curl git
  - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
  - chmod +x ./kubectl
  - mv ./kubectl /usr/local/bin/kubectl
  - git clone https://gitlab.ebi.ac.uk/kamal/ensembl-client-caas-deploy.git
  - cd ensembl-client-caas-deploy
  - git checkout refactor-manifest
  - cd ..
  - sed -i "s/<VERSION>/${PROD_IMAGE_TAG}/g" ensembl-client-caas-deploy/ensembl_client_deployment.yaml
  - sed -i "s/<DEPLOYMNET_ENV>/prod/g" ensembl-client-caas-deploy/ensembl_client_deployment.yaml
  - cat ensembl-client-caas-deploy/ensembl_client_deployment.yaml
  - kubectl config view
  - kubectl config use-context ens-prod-ctx
  - kubectl apply -f ensembl-client-caas-deploy/ensembl_client_deployment.yaml
  when: manual
