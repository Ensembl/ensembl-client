# CI/CD Pipeline
# dev branch -> staging (runs exactly the same code as live; opportunity to inspect the site before pushing to production)
# master branch -> internal (runs from the same master branch as live; but with flags enabled for seeing the latest UI changes that may not be ready for production)
# master branch -> live

# include template to setup review app
include: '/gitlab-ci-templates/.setup-review-template.yaml'

# Define stages for the CI/CD pipeline
stages:
  - setup
  - test
  - test_build_static
  - build_docker_images
  - deploy

variables:
  CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_SHORT_SHA}
  CONTAINER_NODE_IMAGE: ${CI_REGISTRY_IMAGE}:node-${CI_COMMIT_SHORT_SHA}
  KUBE_CONTEXT: ens-dev-ctx
  DEPLOYENV: dev
  ENVIRONMENT: production
  DOCKER_TLS_CERTDIR: ""

# The `before_script` commands for deployment jobs that are used to set up gitlab agent
# (will be used via yaml anchors in the jobs below)
.gitlab-agent-setup-commands: &gitlab-agent-setup-commands
  - kubectl config use-context ${AGENT}
  - kubectl config set-context --current --namespace=${NAMESPACE}

# Template to build static assets
.build-static:
  stage: test_build_static
  image: node:20.9.0

  before_script:
  - npm install --global npm@8.1.0
  - npm ci --loglevel warn

  script:
  - npm run test
  - npm run build

  after_script:
    - echo "BUILD_JOB_ID=${CI_JOB_ID}" >> build_static.env

  artifacts:
    name: build_artifacts
    paths:
      - dist/
      - package.json
      - package-lock.json
    reports:
      dotenv: build_static.env

# Template to build nginx docker image for WP k8s cluster
# WP k8s cluster uses ingress
.build-nginx:
  image: docker

  services:
    - docker:dind

  stage: build_docker_images

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  script:
    - apk update && apk add git
    - git clone --depth 1 https://github.com/Ensembl/ensembl-2020-static-assests.git
    - git clone https://gitlab.ebi.ac.uk/kamal/ensembl-client-nginx.git
    - git -C ensembl-client-nginx checkout migration/ssr
    - docker build -t ${CONTAINER_IMAGE} -f ensembl-client-nginx/Dockerfile --no-cache .
    - docker push ${CONTAINER_IMAGE}
    - docker rmi ${CONTAINER_IMAGE}
    - docker logout $CI_REGISTRY

# Template for publishing static assets for the new kubernetes cluster
.publish_assets:
  image: dockerhub.ebi.ac.uk/ensembl-web/deploy-tools:latest
  stage: deploy
  environment:
    name: jobs/k8s-job

  before_script:
    - *gitlab-agent-setup-commands
    - git clone https://gitlab.ebi.ac.uk/ensembl-web/ensembl-k8s-manifests.git
    - git -C ensembl-k8s-manifests/ checkout k8s123-migration
    - cd ensembl-k8s-manifests/ensembl-client/static-assets

  script:
    - sed -i "s#<PROJECT_ID>#${CI_PROJECT_ID}#g" copy_job.yaml
    - sed -i "s#<JOB_ID>#${BUILD_JOB_ID}#g" copy_job.yaml
    - kustomize edit set namesuffix -- -${CI_PROJECT_ID}-${BUILD_JOB_ID}
    - kubectl apply -k .

# Template to build node docker image for WP k8s cluster
# WP k8s cluster uses ingress
.build-node:
  image: docker

  services:
    - docker:dind

  stage: build_docker_images

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  script:
    - docker build -t ${CONTAINER_NODE_IMAGE} -f Dockerfile.node --no-cache .
    - docker push ${CONTAINER_NODE_IMAGE}
    - docker rmi ${CONTAINER_NODE_IMAGE}
    - docker logout $CI_REGISTRY

# Template for deployment to the new kubernetes cluster
# For live deployment, it does not need to deploy a static assets container
.deploy:
  stage: deploy
  image: dockerhub.ebi.ac.uk/ensembl-web/deploy-tools:latest
  before_script:
    - *gitlab-agent-setup-commands
  script:
    - git clone https://gitlab.ebi.ac.uk/ensembl-web/ensembl-k8s-manifests.git
    - git -C ensembl-k8s-manifests/ checkout k8s123-migration
    - cd ensembl-k8s-manifests/ensembl-client/node
    - kustomize edit set image DOCKER_IMAGE=${CONTAINER_NODE_IMAGE}
    - kubectl apply -k ./

# Template to deploy review-app to WP k8s cluster
.deploy-review:
  stage: deploy
  image: dockerhub.ebi.ac.uk/ensembl-web/deploy-tools:latest
  before_script:
    - *gitlab-agent-setup-commands
  script:
  - git clone https://gitlab.ebi.ac.uk/ensembl-web/ensembl-k8s-manifests.git
  - git -C ensembl-k8s-manifests/ checkout k8s123-migration
  - cd ensembl-k8s-manifests/ensembl-client/nginx
  - mv deployment_review.yaml deployment.yaml
  - kustomize edit set image DOCKER_IMAGE=${CONTAINER_IMAGE}
  - kubectl apply -k ./
  - cd ../node
  - kustomize edit set image DOCKER_IMAGE=${CONTAINER_NODE_IMAGE}
  - kubectl apply -k ./

# Template for stopping review app - Do cleanup here 
.stop-review:
  stage: deploy
  image: dockerhub.ebi.ac.uk/ensembl-web/deploy-tools:latest
  variables:
    GIT_STRATEGY: none
  when: manual
  script:
  - kubectl delete ingress compara-server-ingress-${CI_COMMIT_REF_SLUG}
  - kubectl delete ingress ensembl-help-docs-ingress-${CI_COMMIT_REF_SLUG}
  - kubectl delete ingress ensembl-in-app-search-api-ingress-${CI_COMMIT_REF_SLUG}
  - kubectl delete ingress ensembl-thoas-ingress-${CI_COMMIT_REF_SLUG}
  - kubectl delete ingress ensembl-tools-api-ingress-${CI_COMMIT_REF_SLUG}
  - kubectl delete ingress ensembl-track-api-ingress-${CI_COMMIT_REF_SLUG}
  - kubectl delete ingress genome-browser-server-${CI_COMMIT_REF_SLUG}-hi
  - kubectl delete ingress genome-browser-server-${CI_COMMIT_REF_SLUG}-lo
  - kubectl delete ingress metadata-api-ingress-${CI_COMMIT_REF_SLUG}
  - kubectl delete ingress refget-proxy-ingress-${CI_COMMIT_REF_SLUG}
  - kubectl delete ingress variation-graphql-ingress-${CI_COMMIT_REF_SLUG}
  - kubectl delete namespace ${CI_COMMIT_REF_SLUG}

Test:
  image: node:20.9.0
  stage: test

  before_script:
  - npm install --global npm@8.1.0
  - npm ci --loglevel warn

  script:
  - npm run check-types
  - npm run test

  rules:
    - if: $CI_COMMIT_BRANCH =~ /^nodeploy\/.*$/

# Job to build static assets for staging and live environment
# dev branch -> Staging
# master branch -> Live
Test_N_Build:
  extends: .build-static
  variables:
    GOOGLE_ANALYTICS_KEY: ${GA_KEY}
    ENVIRONMENT: production
    API_HOST: ""
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "dev"

# Job to build static assets for internal environment
# master branch -> Internal
Test_N_Build:internal:
  extends: .build-static
  variables:
    GOOGLE_ANALYTICS_KEY: ${GA_KEY}
    ENVIRONMENT: internal
    API_HOST: ""
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

Test_N_Build:review:
  extends: .build-static
  variables:
    ENVIRONMENT: development
    API_HOST: ""
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "dev" && $CI_COMMIT_BRANCH !~ /^nodeploy\/.*$/

# Job to build node docker image for staging environment
# dev branch -> Staging
Node:Staging:
  extends: .build-node
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  needs:
    - Test_N_Build

# Job to build node docker image for live environment
# master branch -> Live
Node:Live:
  extends: .build-node
  variables:
    CONTAINER_NODE_IMAGE: ${CI_REGISTRY_IMAGE}:node-${CI_COMMIT_SHORT_SHA}-prod
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  needs:
    - Test_N_Build

# Job to build node docker image for internal environment
# master branch -> internal
Node:Internal:
  extends: .build-node
  variables:
    DEPLOYENV: internal
    CONTAINER_NODE_IMAGE: ${CI_REGISTRY_IMAGE}:node-${CI_COMMIT_SHORT_SHA}-internal
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  needs:
    - Test_N_Build:internal

# Job to build nginx docker image for review environment
# all other branch -> dev
Nginx:review:
  extends: .build-nginx
  variables:
    DEPLOYENV: dev
    CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_SLUG}
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "dev" && $CI_COMMIT_BRANCH !~ /^nodeploy\/.*$/
  needs:
    - Test_N_Build:review

# Job to build node docker image for review environment
# all other branch -> dev
Node:review:
  extends: .build-node
  variables:
    DEPLOYENV: dev
    CONTAINER_NODE_IMAGE: ${CI_REGISTRY_IMAGE}:node-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_SLUG}
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "dev" && $CI_COMMIT_BRANCH !~ /^nodeploy\/.*$/
  needs:
    - Test_N_Build:review


######## DEPLOYMENT JOBS ########


# DEPLOYMENT TO THE LIVE (PRODUCTION) ENVIRONMENT (beta.ensembl.org)

# Deploy the Node server
Live:
  extends: .deploy
  variables:
    CONTAINER_NODE_IMAGE: ${CI_REGISTRY_IMAGE}:node-${CI_COMMIT_SHORT_SHA}-prod
    AGENT: ${PROD_AGENT}
    NAMESPACE: ${PROD_NS}
  environment:
    name: production
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "master"'
  needs:
    - Test_N_Build
    - Node:Live

# Publish static assets
Pub:Live:
  extends: .publish_assets
  environment:
    name: production
  variables:
    AGENT: ${PROD_AGENT}
    NAMESPACE: ${PROD_NS}
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "master"'
  needs:
    - Test_N_Build
    - Node:Live


# DEPLOYMENT TO THE LIVE (PRODUCTION) FALLBACK ENVIRONMENT (beta.ensembl.org, running in Hinxton)

# Deploy the Node server
LiveFallback:
  extends: .deploy
  variables:
    CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_SHORT_SHA}-prod
    CONTAINER_NODE_IMAGE: ${CI_REGISTRY_IMAGE}:node-${CI_COMMIT_SHORT_SHA}-prod
    AGENT: ${FALLBACK_AGENT}
    NAMESPACE: ${FALLBACK_NS}
  environment:
    name: fallback
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "master"'
  needs:
    - Test_N_Build
    - Node:Live

# Publish static assets
Pub::LiveFallback:
  extends: .publish_assets
  environment:
    name: fallback
  variables:
    AGENT: ${FALLBACK_AGENT}
    NAMESPACE: ${FALLBACK_NS}
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "master"'
  needs:
    - Test_N_Build
    - Node:Live


# DEPLOYMENT TO THE STAGING ENVIRONMENT (staging-2020.ensembl.org)

# Deploy the Node server
Staging:
  extends: .deploy
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  needs:
    - Test_N_Build
    - Node:Staging
  variables:
    AGENT: ${STAGING_AGENT}
    NAMESPACE: ${STAGING_NS}

# Publish static assets
Pub:Staging:
  extends: .publish_assets
  environment:
    name: staging
  variables:
    AGENT: ${STAGING_AGENT}
    NAMESPACE: ${STAGING_NS}
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  needs:
    - Test_N_Build
    - Node:Staging


# DEPLOYMENT TO THE INTERNAL ENVIRONMENT (internal-2020.ensembl.org)

# Deploy the Node server
Internal:
  extends: .deploy
  variables:
    CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_SHORT_SHA}-internal
    CONTAINER_NODE_IMAGE: ${CI_REGISTRY_IMAGE}:node-${CI_COMMIT_SHORT_SHA}-internal
    AGENT: ${INTERNAL_AGENT}
    NAMESPACE: ${INTERNAL_NS}
  environment:
    name: internal
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  needs:
    - Test_N_Build:internal
    - Node:Internal

# Publish static assets
Pub:Internal:
  extends: .publish_assets
  environment:
    name: internal
  variables:
    AGENT: ${INTERNAL_AGENT}
    NAMESPACE: ${INTERNAL_NS}
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
  needs:
    - Test_N_Build:internal
    - Node:Internal


# DEPLOYMENT TO THE DEVELOPMENT ENVIRONMENT (dev-2020.ensembl.org)

# Deploy the Node server
Dev:
  extends: .deploy
  variables:
    CONTAINER_NODE_IMAGE: ${CI_REGISTRY_IMAGE}:node-${CI_COMMIT_SHORT_SHA}-prod
    AGENT: ${DEV_AGENT}
    NAMESPACE: ${DEV_NS}
  environment:
    name: development
    kubernetes:
      namespace: ensembl-dev
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "master"'
  needs:
    - Test_N_Build
    - Node:Live

# Publish static assets
Pub:Dev:
  extends: .publish_assets
  environment:
    name: development
  variables:
    AGENT: ${DEV_AGENT}
    NAMESPACE: ${DEV_NS}
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "master"'
  needs:
    - Test_N_Build
    - Node:Live


# REVIEW DEPLOYMENTS (<branch_name>.review.ensembl.org)

# Job to deploy Node server and a dedicated Nginx container with embedded static assets
Review:
  extends: .deploy-review
  variables:
    CONTAINER_IMAGE: ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_SLUG}
    CONTAINER_NODE_IMAGE: ${CI_REGISTRY_IMAGE}:node-${CI_COMMIT_SHORT_SHA}-${CI_COMMIT_REF_SLUG}
    AGENT: ${DEV_AGENT}
    NAMESPACE: ${CI_COMMIT_REF_SLUG}
  environment:
    name: development
    url: http://$CI_COMMIT_REF_SLUG.review.ensembl.org
    kubernetes:
      namespace: ${CI_COMMIT_REF_SLUG}
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "dev" && $CI_COMMIT_BRANCH !~ /^nodeploy\/.*$/
  needs:
    - Test_N_Build:review
    - Nginx:review
    - Node:review

# Clean up the review app resources
CleanUpReview:
  extends: .stop-review
  environment:
    name: development
    action: stop
    kubernetes:
      namespace: ${CI_COMMIT_REF_SLUG}
  except:
  - dev
  - master


# Create a review deployment (runs once per new branch)
SetupReview:
  extends: .setup-review-newk8s
  environment:
    name: development
  variables:
    AGENT: ${DEV_AGENT}
    DEV_NAMESPACE: ${DEV_NS}
    NAMESPACE: ${CI_COMMIT_REF_SLUG}
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && 
          $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000" && 
          $CI_COMMIT_REF_NAME !~  "/^nodeploy\/.*$/"
      when: always
