;;; --cut-- [smoke]

    const #1,{"boo"}
    halt
.start:
    const #1,{"hello, t√°naiste!"}
    dprint #1
    halt
    const #1,{"NOOOO!"}
    dprint #1

;;; --cut-- [parse-error-1]

    const #1,"hello, \300\300"

;;; --cut-- [parse-error-2]

    halt
    const #1 : #2

;;; --cut-- [inst-error-1]

    unknown #1

;;; --cut-- [inst-error-2]

    dprint {"hello"}

;; --cut-- [extern]

    const #4, {"running"}
    dprint #4
    const #1, [4]
    const #2, [4]
    const #6, {"touch /tmp/x"}
    const #7, {"ls /tmp/x ; rm /tmp/x"}
    extern #3, #0, #6
    extern #1, #4, #7
    extern #2, #5, #7
    const #8, {"finished"}
    dprint #8
    dprint #4
    dprint #5

;;; --cut-- [const]

    const #1,{"hi"}

;;; --cut-- [move]

    const #1,{"hi"}
    const #2,{"lo"}
    move #2,#1

;;; --cut-- [sleep]

    const #1, {"sleeping"}
    dprint #1
    const #2, [100]
    sleep #2
    const #1, {"waking"}
    dprint #1

;;; --cut-- [sleep-inter]

    const #1, {"sleeping"}
    dprint #1
    const #2, [10000]
    sleep #2
    const #1, {"waking"}
    dprint #1

;;; --cut-- [concat]

    const #1, {"hello "}
    const #2, {"world!"}
    concat #3, #1, #2
    dprint #1
    dprint #2
    dprint #3

;;; --cut-- [interp-smoke]

    const #1, [0,200]
    const #2, {"Success!"}

;;; --cut-- [multi-1]

    const #1, [100]
    sleep #1
    sleep #1
    sleep #1
    sleep #1
    sleep #1
    const #2, {"multi-1"}
    dprint #2

;;; --cut-- [multi-2]

    const #1, [200]
    sleep #1
    sleep #1
    sleep #1
    sleep #1
    sleep #1
    const #2, {"multi-2"}
    dprint #2

;;; --cut-- [interp-sleep-wake]

    const #1, {"sleeping"}
    dprint #1
    const #1, [100]
    sleep #1
    const #2, {"awoke"}
    dprint #2

;;; --cut-- [interp-status]

    const #1, {"sleeping"}
    dprint #1
    const #1, [100]
    sleep #1
    const #2, {"awoke"}
    dprint #2

;;; --cut-- [cycle-count]

    const #1, {"hello "}
    const #2, {"world!"}
    concat #3, #1, #2
    concat #3, #3, #3
    concat #3, #3, #3
    concat #3, #3, #3
    concat #3, #3, #3
    concat #3, #3, #3

;;; --cut-- [limit-stack-entry]

    const #1,[0,0]
    push #1
    push #1
    push #1
    push #1

;;; --cut-- [limit-stack-data]

    const #1,[0,0]
    push #1
    push #1

;;; --cut-- [time-limit]

    const #1,[50]
    sleep #1
    sleep #1
    sleep #1
    

;;; --cut-- [pushpop-cmd]

    const #1,{"hello"}
    const #2,[200]
    push #2
    push #1
    pop #2
    pop #1

;;; --cut-- [poll-smoke]

    pollmake #1       ; pollmake [group]
    const #3,[500]
    posleep #2,#1,#3  ; posleep [fd],[group],500ms
    pollany #4,#1     ; pollany [ready-fd],[group]
    polldone #1       ; polldone [group]
    ; #4 == #2 ???    ; [ready-fd] == [fd]

;;; --cut-- [poll-smoke-2]

    pollmake #1       ; pollmake [group]
    const #3,[500]
    posleep #2,#1,#3  ; posleep [fd1],[group],500ms
    const #3,[100]
    posleep #4,#1,#3  ; posleep [fd2],[group],100ms
    pollany #5,#1     ; pollany [ready-fd(==fd2?)],[group]
    pollreset #1,#5   ; pollreset [group],[ready-fd]
    pollany #6,#1     ; pollany [ready-fd(==fd1?)],[group]
    polldone #1       ; polldone [group]

;;; --cut-- [po-extern]

    pollmake #1

    ; first command
    const #2, {"echo \"hello\""}
    poextern #3,#1,#2
    
    ; second command
    const #2, {"sleep 1"}
    poextern #4,#1,#2
    
    ; wait for either (will get 1st) and store code/output in #7/#8
    pollany #5,#1
    pollreset #1,#5
    poexternres #7,#8,#1,#5
    
    const #2, {"1st"}
    dprint #2
    dprint #8
    
    ; wait for either (will get 2nd) and store code/output in #9/#10
    pollany #6,#1
    poexternres #9,#10,#1,#6
    
    const #2, {"2nd"}
    dprint #2
    dprint #9
    
    polldone #1

;;; --cut-- [context]

    dset
    
;;; --cut-- [set-reg]

    halt
