"use strict";(globalThis.webpackChunkensembl_new=globalThis.webpackChunkensembl_new||[]).push([[7024],{"./config.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var src_shared_helpers_environment__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/shared/helpers/environment.ts"),src_shared_constants_globals__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/shared/constants/globals.ts"),src_server_constants__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/server/constants.ts");const defaultApiUrls={coreApiUrl:"/api/graphql/core",metadataApiBaseUrl:"/api/metadata",comparaApiBaseUrl:"/api/graphql/compara",docsBaseUrl:"/api/docs",genomeBrowserBackendBaseUrl:"/api/browser/data",refgetBaseUrl:"/api/refget",tracksApiBaseUrl:"/api/tracks",toolsApiBaseUrl:"/api/tools",searchApiBaseUrl:"/api/search",variationApiUrl:"/api/graphql/variation",regulationApiBaseUrl:"https://dev-2020.ensembl.org/api/regulation"},defaultKeys={googleAnalyticsKey:""},buildEnvironment=(0,src_shared_helpers_environment__WEBPACK_IMPORTED_MODULE_0__.Qo)().buildEnvironment,__WEBPACK_DEFAULT_EXPORT__={app_version:"0.4.0",isDevelopment:"development"===buildEnvironment,isProduction:"development"!==buildEnvironment,shouldReportAnalytics:(0,src_shared_helpers_environment__WEBPACK_IMPORTED_MODULE_0__.oc)()&&window[src_shared_constants_globals__WEBPACK_IMPORTED_MODULE_1__.T]?.environment.shouldReportAnalytics,shouldReportErrors:(0,src_shared_helpers_environment__WEBPACK_IMPORTED_MODULE_0__.oc)()&&window[src_shared_constants_globals__WEBPACK_IMPORTED_MODULE_1__.T]?.environment.shouldReportErrors,apiHost:"",...(0,src_shared_helpers_environment__WEBPACK_IMPORTED_MODULE_0__.oc)()?window[src_shared_constants_globals__WEBPACK_IMPORTED_MODULE_1__.T]?.apiPaths??defaultApiUrls:{coreApiUrl:globalThis.process?.env.SSR_CORE_API_BASE_URL??`${src_server_constants__WEBPACK_IMPORTED_MODULE_2__.JH}${defaultApiUrls.coreApiUrl}`,docsBaseUrl:globalThis.process?.env.SSR_DOCS_BASE_URL??`${src_server_constants__WEBPACK_IMPORTED_MODULE_2__.JH}${defaultApiUrls.docsBaseUrl}`,variationApiUrl:globalThis.process?.env.SSR_VARIATION_GRAPHQL_API_URL??`${src_server_constants__WEBPACK_IMPORTED_MODULE_2__.JH}${defaultApiUrls.variationApiUrl}`,metadataApiBaseUrl:globalThis.process?.env.SSR_METADATA_API_URL??`${src_server_constants__WEBPACK_IMPORTED_MODULE_2__.JH}${defaultApiUrls.metadataApiBaseUrl}`,regulationApiBaseUrl:defaultApiUrls.regulationApiBaseUrl,comparaApiBaseUrl:defaultApiUrls.comparaApiBaseUrl,genomeBrowserBackendBaseUrl:defaultApiUrls.genomeBrowserBackendBaseUrl,refgetBaseUrl:defaultApiUrls.refgetBaseUrl,tracksApiBaseUrl:defaultApiUrls.tracksApiBaseUrl,toolsApiBaseUrl:defaultApiUrls.toolsApiBaseUrl,searchApiBaseUrl:defaultApiUrls.searchApiBaseUrl},...(0,src_shared_helpers_environment__WEBPACK_IMPORTED_MODULE_0__.oc)()&&window[src_shared_constants_globals__WEBPACK_IMPORTED_MODULE_1__.T]?.keys||defaultKeys}},"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[13].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[13].use[2]!./src/shared/components/species-name-parts/SpeciesNameParts.module.css":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,"@layer components {\n  .scientificName__SpeciesNameParts-module__Rd1ED {\n    font-style: italic;\n  }\n  \n  .reference__SpeciesNameParts-module__RkaOS {\n    font-style: var(--species-reference-font-style, italic);\n  }\n}\n","",{version:3,sources:["webpack://./src/shared/components/species-name-parts/SpeciesNameParts.module.css"],names:[],mappings:"AAAA;EACE;IACE,kBAAkB;EACpB;;EAEA;IACE,uDAAuD;EACzD;AACF",sourcesContent:["@layer components {\n  .scientificName {\n    font-style: italic;\n  }\n  \n  .reference {\n    font-style: var(--species-reference-font-style, italic);\n  }\n}\n"],sourceRoot:""}]),___CSS_LOADER_EXPORT___.locals={scientificName:"scientificName__SpeciesNameParts-module__Rd1ED",reference:"reference__SpeciesNameParts-module__RkaOS"};const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___},"./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[13].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[13].use[2]!./src/shared/components/species-name/SpeciesName.module.css":(module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/css-loader/dist/runtime/sourceMaps.js"),_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__),_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js"),___CSS_LOADER_EXPORT___=__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__)()(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default());___CSS_LOADER_EXPORT___.push([module.id,'/* \n  To style individual parts of the species name from the parent, use the following selectors:\n  - [data-part="common-name"] for species common name\n  - [data-part="scientific-name"] for species scientific name\n  - [data-part="assembly-name"] for assembly name\n  - [data-part="assembly-id"] for assembly accession id\n  - [data-part="reference"] for the element indicating whether this is a reference assembly\n  - [data-part="type"] for the element displaying the type information (e.g. strain, cultivar, population) of the genome/assembly\n */\n\n@layer components {\n  .speciesName__SpeciesName-module__ErtzK > span:not(:last-child) {\n    margin-right: 8px;\n  }\n\n  .prominent__SpeciesName-module__xdbMJ {\n    font-weight: var(--font-weight-bold);\n  }\n}\n',"",{version:3,sources:["webpack://./src/shared/components/species-name/SpeciesName.module.css"],names:[],mappings:"AAAA;;;;;;;;EAQE;;AAEF;EACE;IACE,iBAAiB;EACnB;;EAEA;IACE,oCAAoC;EACtC;AACF",sourcesContent:['/* \n  To style individual parts of the species name from the parent, use the following selectors:\n  - [data-part="common-name"] for species common name\n  - [data-part="scientific-name"] for species scientific name\n  - [data-part="assembly-name"] for assembly name\n  - [data-part="assembly-id"] for assembly accession id\n  - [data-part="reference"] for the element indicating whether this is a reference assembly\n  - [data-part="type"] for the element displaying the type information (e.g. strain, cultivar, population) of the genome/assembly\n */\n\n@layer components {\n  .speciesName > span:not(:last-child) {\n    margin-right: 8px;\n  }\n\n  .prominent {\n    font-weight: var(--font-weight-bold);\n  }\n}\n'],sourceRoot:""}]),___CSS_LOADER_EXPORT___.locals={speciesName:"speciesName__SpeciesName-module__ErtzK",prominent:"prominent__SpeciesName-module__xdbMJ"};const __WEBPACK_DEFAULT_EXPORT__=___CSS_LOADER_EXPORT___},"./src/content/app/entity-viewer/services/entity-viewer-storage-service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>__WEBPACK_DEFAULT_EXPORT__});var src_services_storage_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/services/storage-service.ts");let StorageKeys=function(StorageKeys){return StorageKeys.GENERAL_STATE="entityViewer.generalState",StorageKeys.GENE_VIEW_TRANSCRIPTS_STATE="entityViewer.geneView.transcriptsState",StorageKeys}({});const localStorageOptions={storage:src_services_storage_service__WEBPACK_IMPORTED_MODULE_0__.eL.LOCAL_STORAGE};const __WEBPACK_DEFAULT_EXPORT__=new class EntityViewerStorageService{constructor(storageService){this.storageService=storageService}getGeneralState(){return this.storageService.get(StorageKeys.GENERAL_STATE,localStorageOptions)}updateGeneralState(updatedState){this.storageService.update(StorageKeys.GENERAL_STATE,updatedState,localStorageOptions)}deleteGenome(genomeIdToDelete){const activeGenomeId=this.getGeneralState()?.activeGenomeId;activeGenomeId===genomeIdToDelete&&this.updateGeneralState({activeGenomeId:void 0}),this.storageService.removeAt(StorageKeys.GENERAL_STATE,["activeEntityIds",genomeIdToDelete],localStorageOptions)}getGeneViewTranscriptsState(){return this.storageService.get(StorageKeys.GENE_VIEW_TRANSCRIPTS_STATE,localStorageOptions)}updateGeneViewTranscriptsState(updatedState){this.storageService.update(StorageKeys.GENE_VIEW_TRANSCRIPTS_STATE,updatedState,localStorageOptions)}clearGeneViewTranscriptsState(ids){const{genomeId,entityId}=ids;this.storageService.removeAt(StorageKeys.GENE_VIEW_TRANSCRIPTS_STATE,[genomeId,entityId],localStorageOptions)}}(src_services_storage_service__WEBPACK_IMPORTED_MODULE_0__.Ay)},"./src/content/app/entity-viewer/state/bookmarks/entityViewerBookmarksSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>entityViewerBookmarksSlice,bS:()=>deletePreviouslyViewedEntities});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.some.js");var redux_toolkit_modern=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs"),entity_viewer_storage_service=__webpack_require__("./src/content/app/entity-viewer/services/entity-viewer-storage-service.ts"),previouslyViewedObjectsStorageService=__webpack_require__("./src/shared/services/previouslyViewedObjectsStorageService.ts");const updatePreviouslyViewedEntities=(0,redux_toolkit_modern.zD)("entity-viewer/updatePreviouslyViewedEntities",((params,thunkAPI)=>{const{genomeId,entity}=params,{getState}=thunkAPI,previouslyViewedEntities=((state,genomeId)=>(state=>state.entityViewer.bookmarks.previouslyViewed)(state)[genomeId]||[])(getState(),genomeId),isCurrentEntityPreviouslyViewed=previouslyViewedEntities?.some((previouslyViewedEntity=>previouslyViewedEntity.id===entity.id));if(isCurrentEntityPreviouslyViewed)return{genomeId,updatedEntities:previouslyViewedEntities};if(20===previouslyViewedEntities.length){const oldestPreviouslyViewedEntity=previouslyViewedEntities[previouslyViewedEntities.length-1];entity_viewer_storage_service.Ay.clearGeneViewTranscriptsState({genomeId,entityId:oldestPreviouslyViewedEntity.id})}const updatedEntities=[{id:entity.id,urlId:entity.urlId,label:entity.label,type:entity.type},...previouslyViewedEntities].slice(0,20);return(0,previouslyViewedObjectsStorageService.rt)(genomeId,updatedEntities),{genomeId,updatedEntities}})),loadPreviouslyViewedEntities=(0,redux_toolkit_modern.zD)("entity-viewer/loadPreviouslyViewedEntities",(()=>(0,previouslyViewedObjectsStorageService.VB)())),bookmarksSlice=(0,redux_toolkit_modern.Z0)({name:"entity-viewer-bookmarks",initialState:{previouslyViewed:{}},reducers:{deletePreviouslyViewedEntities(state,action){const{genomeId}=action.payload;delete state.previouslyViewed[genomeId]}},extraReducers:builder=>{builder.addCase(updatePreviouslyViewedEntities.fulfilled,((state,action)=>{const{genomeId,updatedEntities}=action.payload;state.previouslyViewed[genomeId]=updatedEntities})),builder.addCase(loadPreviouslyViewedEntities.fulfilled,((state,action)=>{state.previouslyViewed=action.payload}))}}),{deletePreviouslyViewedEntities}=bookmarksSlice.actions,entityViewerBookmarksSlice=bookmarksSlice.reducer},"./src/content/app/entity-viewer/state/general/entityViewerGeneralSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>__WEBPACK_DEFAULT_EXPORT__});var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs"),src_content_app_entity_viewer_services_entity_viewer_storage_service__WEBPACK_IMPORTED_MODULE_1__=(__webpack_require__("./node_modules/lodash/pickBy.js"),__webpack_require__("./src/content/app/entity-viewer/services/entity-viewer-storage-service.ts")),src_content_app_entity_viewer_state_bookmarks_entityViewerBookmarksSlice__WEBPACK_IMPORTED_MODULE_3__=(__webpack_require__("./src/content/app/species-selector/state/species-selector-general-slice/speciesSelectorGeneralSelectors.ts"),__webpack_require__("./src/content/app/entity-viewer/state/bookmarks/entityViewerBookmarksSlice.ts"));const deleteGenome=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__.zD)("entity-viewer-general/deleteGenome",((genomeId,thunkAPI)=>{const{dispatch}=thunkAPI;return dispatch((0,src_content_app_entity_viewer_state_bookmarks_entityViewerBookmarksSlice__WEBPACK_IMPORTED_MODULE_3__.bS)({genomeId})),src_content_app_entity_viewer_services_entity_viewer_storage_service__WEBPACK_IMPORTED_MODULE_1__.Ay.deleteGenome(genomeId),genomeId})),entityViewerGeneralSlice=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_4__.Z0)({name:"entity-viewer-general",initialState:{activeGenomeId:null,activeEntityIds:{}},reducers:{loadInitialState(state){const savedState=src_content_app_entity_viewer_services_entity_viewer_storage_service__WEBPACK_IMPORTED_MODULE_1__.Ay.getGeneralState();return savedState?{...state,...savedState}:state},setActiveGenomeId(state,action){state.activeGenomeId=action.payload},updateActiveEntityForGenome(state,action){const{genomeId,entityId}=action.payload;state.activeEntityIds[genomeId]=entityId},deleteActiveEntityIdForGenome(state,action){const genomeId=action.payload;delete state.activeEntityIds[genomeId]}},extraReducers:builder=>{builder.addCase(deleteGenome.fulfilled,((state,action)=>{const genomeId=action.payload;delete state.activeEntityIds[genomeId],genomeId===state.activeGenomeId&&(state.activeGenomeId=null),src_content_app_entity_viewer_services_entity_viewer_storage_service__WEBPACK_IMPORTED_MODULE_1__.Ay.deleteGenome(genomeId)}))}}),{loadInitialState,setActiveGenomeId,updateActiveEntityForGenome,deleteActiveEntityIdForGenome}=entityViewerGeneralSlice.actions,__WEBPACK_DEFAULT_EXPORT__=entityViewerGeneralSlice.reducer},"./src/content/app/genome-browser/services/browserStorageService.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>__WEBPACK_DEFAULT_EXPORT__});var src_services_storage_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/services/storage-service.ts");let StorageKeys=function(StorageKeys){return StorageKeys.ACTIVE_GENOME_ID="genomeBrowser.activeGenomeId",StorageKeys.ACTIVE_ENS_OBJECT_ID="genomeBrowser.activeFocusObjectId",StorageKeys.CHR_LOCATION="genomeBrowser.chrLocation",StorageKeys.DEFAULT_CHR_LOCATION="genomeBrowser.defaultChrLocation",StorageKeys.TRACK_STATES="genomeBrowser.trackStates",StorageKeys.TRACK_PANELS="genomeBrowser.trackPanels",StorageKeys}({});const __WEBPACK_DEFAULT_EXPORT__=new class BrowserStorageService{constructor(storageService){this.storageService=storageService}getActiveGenomeId(){return this.storageService.get(StorageKeys.ACTIVE_GENOME_ID)}saveActiveGenomeId(activeGenomeId){activeGenomeId&&this.storageService.save(StorageKeys.ACTIVE_GENOME_ID,activeGenomeId)}clearActiveGenomeId(){this.storageService.remove(StorageKeys.ACTIVE_GENOME_ID)}getActiveFocusObjectIds(){return this.storageService.get(StorageKeys.ACTIVE_ENS_OBJECT_ID)||{}}updateActiveFocusObjectIds(activeFocusObjectIds){this.storageService.update(StorageKeys.ACTIVE_ENS_OBJECT_ID,activeFocusObjectIds)}getChrLocation(){return this.storageService.get(StorageKeys.CHR_LOCATION)||{}}updateChrLocation(chrLocation){this.storageService.update(StorageKeys.CHR_LOCATION,chrLocation)}getTrackPanels(){return this.storageService.get(StorageKeys.TRACK_PANELS)||{}}updateTrackPanels(trackPanels){this.storageService.update(StorageKeys.TRACK_PANELS,trackPanels)}deleteGenome(genomeIdToDelete){this.getActiveGenomeId()===genomeIdToDelete&&this.clearActiveGenomeId(),this.updateActiveFocusObjectIds({[genomeIdToDelete]:void 0}),this.updateChrLocation({[genomeIdToDelete]:void 0}),this.updateTrackPanels({[genomeIdToDelete]:void 0})}}(src_services_storage_service__WEBPACK_IMPORTED_MODULE_0__.Ay)},"./src/content/app/genome-browser/services/focus-objects/focusObjectStorageConstants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>GB_FOCUS_OBJECTS_STORE_NAME});const GB_FOCUS_OBJECTS_STORE_NAME="genome-browser-focus-objects"},"./src/content/app/genome-browser/services/focus-objects/focusObjectStorageService.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{n_:()=>updateFocusObject,qJ:()=>getFocusObject});var src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/services/indexeddb-service.ts"),_focusObjectStorageConstants__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/content/app/genome-browser/services/focus-objects/focusObjectStorageConstants.ts");const getFocusObject=async focusObjectId=>{try{return await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.get(_focusObjectStorageConstants__WEBPACK_IMPORTED_MODULE_1__.A,focusObjectId)}catch{return}},updateFocusObject=async(focusObjectId,focusObject)=>{const storedFocusObject=await getFocusObject(focusObjectId);if(storedFocusObject){const{createdAt}=storedFocusObject,newData={...buildFocusObjectDataForStorage(focusObject),createdAt};await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.set(_focusObjectStorageConstants__WEBPACK_IMPORTED_MODULE_1__.A,focusObject.object_id,newData)}else await(async focusObject=>{const storableData=buildFocusObjectDataForStorage(focusObject);try{await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.set(_focusObjectStorageConstants__WEBPACK_IMPORTED_MODULE_1__.A,focusObject.object_id,storableData)}catch{}})(focusObject)},buildFocusObjectDataForStorage=focusObject=>{if("gene"===focusObject.type)return buildFocusGeneStorageData(focusObject)},buildFocusGeneStorageData=focusGene=>({id:focusGene.object_id,genomeId:focusGene.genome_id,type:"gene",visibleTranscriptIds:focusGene.visibleTranscriptIds,createdAt:Date.now(),updatedAt:Date.now()})},"./src/content/app/genome-browser/services/track-settings/trackSettingsStorageConstants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Q:()=>GB_TRACK_SETTINGS_STORE_NAME,v:()=>trackSettingFieldsMap});__webpack_require__("./node_modules/core-js/modules/es.set.difference.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.intersection.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.is-disjoint-from.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.is-subset-of.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.is-superset-of.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.symmetric-difference.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.union.v2.js");var src_content_app_genome_browser_state_track_settings_trackSettingsConstants__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/content/app/genome-browser/state/track-settings/trackSettingsConstants.ts");const GB_TRACK_SETTINGS_STORE_NAME="genome-browser-track-settings",trackSettingFieldsMap=new Map;trackSettingFieldsMap.set(src_content_app_genome_browser_state_track_settings_trackSettingsConstants__WEBPACK_IMPORTED_MODULE_7__.S.GENE,new Set(Object.keys((0,src_content_app_genome_browser_state_track_settings_trackSettingsConstants__WEBPACK_IMPORTED_MODULE_7__.PZ)()))),trackSettingFieldsMap.set(src_content_app_genome_browser_state_track_settings_trackSettingsConstants__WEBPACK_IMPORTED_MODULE_7__.S.FOCUS_GENE,new Set(Object.keys((0,src_content_app_genome_browser_state_track_settings_trackSettingsConstants__WEBPACK_IMPORTED_MODULE_7__.p_)()))),trackSettingFieldsMap.set(src_content_app_genome_browser_state_track_settings_trackSettingsConstants__WEBPACK_IMPORTED_MODULE_7__.S.REGULAR,new Set(Object.keys((0,src_content_app_genome_browser_state_track_settings_trackSettingsConstants__WEBPACK_IMPORTED_MODULE_7__._P)()))),trackSettingFieldsMap.set(src_content_app_genome_browser_state_track_settings_trackSettingsConstants__WEBPACK_IMPORTED_MODULE_7__.S.FOCUS_VARIANT,new Set(Object.keys((0,src_content_app_genome_browser_state_track_settings_trackSettingsConstants__WEBPACK_IMPORTED_MODULE_7__.Vm)())))},"./src/content/app/genome-browser/services/track-settings/trackSettingsStorageService.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{K1:()=>updateTrackSettings});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.find.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.map.js");var src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/services/indexeddb-service.ts"),_trackSettingsStorageConstants__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/content/app/genome-browser/services/track-settings/trackSettingsStorageConstants.ts");const updateTrackSettings=async(genomeId,trackSettings)=>{try{const{id:trackId}=trackSettings,retrievedTrack=await(async(genomeId,trackId)=>{try{const database=await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_4__.A.getDB(),retrievedTrack=await database.get(_trackSettingsStorageConstants__WEBPACK_IMPORTED_MODULE_5__.Q,[genomeId,trackId]);return retrievedTrack?cleanUpStoredTrack(retrievedTrack):null}catch{return null}})(genomeId,trackId);retrievedTrack?(retrievedTrack.settings={...retrievedTrack.settings,...trackSettings.settings},retrievedTrack.updatedAt=Date.now(),await saveStoredTracksSettings([retrievedTrack])):await(async(genomeId,trackSettings)=>{try{const preparedTrackData=buildTrackForStorage(genomeId,trackSettings),database=await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_4__.A.getDB();await database.put(_trackSettingsStorageConstants__WEBPACK_IMPORTED_MODULE_5__.Q,preparedTrackData)}catch{}})(genomeId,trackSettings)}catch{}},saveStoredTracksSettings=async storedTracks=>{try{const transaction=(await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_4__.A.getDB()).transaction(_trackSettingsStorageConstants__WEBPACK_IMPORTED_MODULE_5__.Q,"readwrite"),databaseWritePromises=storedTracks.map((track=>transaction.store.put(track)));await Promise.all(databaseWritePromises),await transaction.done}catch{}},buildTrackForStorage=(genomeId,trackSettings)=>({genomeId,trackId:trackSettings.id,trackType:trackSettings.trackType,settings:trackSettings.settings,createdAt:Date.now(),updatedAt:Date.now()}),cleanUpStoredTrack=track=>{const{trackType}=track,relevantSettings=_trackSettingsStorageConstants__WEBPACK_IMPORTED_MODULE_5__.v.get(trackType);if(!relevantSettings)return track;const verifiedSettingsEntries=Object.entries(track.settings).filter((([key])=>relevantSettings.has(key)));return track.settings=Object.fromEntries(verifiedSettingsEntries),track}},"./src/content/app/genome-browser/state/browser-bookmarks/browserBookmarksSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>browserBookmarksSlice});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.some.js");var redux_toolkit_modern=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs");__webpack_require__("./src/content/app/genome-browser/state/browser-general/browserGeneralSelectors.ts");__webpack_require__("./src/shared/services/previouslyViewedObjectsStorageService.ts");const bookmarksSlice=(0,redux_toolkit_modern.Z0)({name:"genome-browser-bookmarks",initialState:{bookmarks:{},previouslyViewedObjects:{}},reducers:{setInitialState(state,action){state.previouslyViewedObjects=action.payload},updatePreviouslyViewedObjects(state,action){const{activeGenomeId,previouslyViewedObjects}=action.payload;state.previouslyViewedObjects[activeGenomeId]=previouslyViewedObjects},deletePreviouslyViewedObjects(state,action){const{genomeId}=action.payload;delete state.previouslyViewedObjects[genomeId]}}}),{deletePreviouslyViewedObjects}=bookmarksSlice.actions,browserBookmarksSlice=bookmarksSlice.reducer},"./src/content/app/genome-browser/state/browser-general/browserGeneralSelectors.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__("./src/shared/state/genome/genomeSelectors.ts"),__webpack_require__("./src/content/app/genome-browser/state/focus-object/focusObjectSelectors.ts")},"./src/content/app/genome-browser/state/browser-general/browserGeneralSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.for-each.js");var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs");__webpack_require__("./node_modules/lodash/pickBy.js"),__webpack_require__("./src/content/app/genome-browser/services/browserStorageService.ts"),__webpack_require__("./src/content/app/genome-browser/services/track-settings/trackSettingsStorageService.ts"),__webpack_require__("./src/content/app/genome-browser/services/focus-objects/focusObjectStorageService.ts"),__webpack_require__("./src/content/app/genome-browser/state/focus-object/focusObjectSlice.ts"),__webpack_require__("./src/content/app/genome-browser/state/track-panel/trackPanelSlice.ts"),__webpack_require__("./src/content/app/genome-browser/state/browser-bookmarks/browserBookmarksSlice.ts"),__webpack_require__("./src/content/app/genome-browser/state/track-settings/trackSettingsSlice.ts"),__webpack_require__("./src/content/app/genome-browser/state/browser-general/browserGeneralSelectors.ts");const browserGeneralSlice=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_11__.Z0)({name:"genome-browser-general",initialState:{activeGenomeId:null,activeFocusObjectIds:{},chrLocations:{},actualChrLocations:{},regionEditorActive:!1,regionFieldActive:!1},reducers:{setInitialState(state,action){state=Object.assign(state,action.payload)},setActiveGenomeId(state,action){const genomeId=action.payload;state.activeGenomeId=genomeId},setDataFromUrl(state,action){const{activeGenomeId,activeFocusObjectId,chrLocation}=action.payload;state.activeGenomeId=activeGenomeId,activeFocusObjectId&&(state.activeFocusObjectIds[activeGenomeId]=activeFocusObjectId),chrLocation?state.chrLocations[activeGenomeId]=chrLocation:delete state.chrLocations[activeGenomeId]},updateBrowserActiveFocusObjectIds(state,action){state.activeFocusObjectIds=action.payload},deleteBrowserDataForGenome(state,action){const genomeIdToRemove=action.payload,activeGenomeId=state.activeGenomeId;delete state.chrLocations[genomeIdToRemove],delete state.actualChrLocations[genomeIdToRemove],activeGenomeId===genomeIdToRemove&&(state.activeGenomeId=null,delete state.activeFocusObjectIds[activeGenomeId])},updateChrLocation(state,action){state.chrLocations=Object.assign(state.chrLocations,action.payload)},updateActualChrLocation(state,action){const activeGenomeId=state.activeGenomeId;activeGenomeId&&(state.actualChrLocations=Object.assign(state.actualChrLocations,{[activeGenomeId]:action.payload}))},toggleRegionEditorActive(state,action){state.regionEditorActive=action.payload},toggleRegionFieldActive(state,action){state.regionFieldActive=action.payload}}}),{setActiveGenomeId,updateBrowserActiveFocusObjectIds,deleteBrowserDataForGenome,updateChrLocation,updateActualChrLocation,toggleRegionEditorActive,toggleRegionFieldActive}=browserGeneralSlice.actions,__WEBPACK_DEFAULT_EXPORT__=browserGeneralSlice.reducer},"./src/content/app/genome-browser/state/browser-sidebar-modal/browserSidebarModalSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>__WEBPACK_DEFAULT_EXPORT__});var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs");__webpack_require__("./src/content/app/genome-browser/state/browser-general/browserGeneralSelectors.ts");const browserSidebarModal=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.Z0)({name:"genome-browser-sidebar-modal",initialState:{},reducers:{updateBrowserSidebarModalForGenome(state,action){const{activeGenomeId,data}=action.payload;state[activeGenomeId]={...state[activeGenomeId],...data}}}}),{updateBrowserSidebarModalForGenome}=browserSidebarModal.actions,__WEBPACK_DEFAULT_EXPORT__=browserSidebarModal.reducer},"./src/content/app/genome-browser/state/focus-object/focusObjectSelectors.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{E9:()=>getFocusObjectLoadingStatus});var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/reselect/dist/reselect.mjs"),_isGeneFocusObject__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/content/app/genome-browser/state/focus-object/isGeneFocusObject.ts");const getFocusObjectLoadingStatus=(state,objectId)=>state.browser.focusObjects[objectId]?.loadingStatus??null;(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.Mz)(((state,focusGeneId)=>{const focusObject=state.browser.focusObjects[focusGeneId]?.data;return(0,_isGeneFocusObject__WEBPACK_IMPORTED_MODULE_0__.A)(focusObject)?focusObject:null}),(focusGene=>focusGene?.visibleTranscriptIds??null))},"./src/content/app/genome-browser/state/focus-object/focusObjectSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>focus_object_focusObjectSlice});var redux_toolkit_modern=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs"),isGeneFocusObject=__webpack_require__("./src/content/app/genome-browser/state/focus-object/isGeneFocusObject.ts"),focusObjectStorageService=__webpack_require__("./src/content/app/genome-browser/services/focus-objects/focusObjectStorageService.ts"),config_0=(__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.map.js"),__webpack_require__("./config.ts")),restSlice=__webpack_require__("./src/shared/state/api-slices/restSlice.ts"),graphqlApiSlice=__webpack_require__("./src/shared/state/api-slices/graphqlApiSlice.ts"),esm=__webpack_require__("./node_modules/graphql-request/build/esm/index.js");const queries_trackPanelGeneQuery=params=>esm.J1`
  query TrackPanelGene {
    gene(by_id: { genome_id: "${params.genomeId}", stable_id: "${params.geneId}" }) {
      stable_id
      unversioned_stable_id
      symbol
      slice {
        region {
          name
        }
        location {
          start
          end
        }
        strand {
          code
        }
      }
      metadata {
        biotype {
          label
        }
      }
      transcripts {
        stable_id
        slice {
          location {
            length
          }
        }
        product_generating_contexts {
          product_type
          product {
            length
          }
        }
        metadata {
          biotype {
            label
            value
          }
          canonical {
            value
            label
          }
          mane {
            value
            label
            ncbi_transcript {
              id
              url
            }
          }
        }
      }
    }
  }
`,geneSummaryQuery=esm.J1`
  query Gene($genomeId: String!, $geneId: String!) {
    gene(by_id: { genome_id: $genomeId, stable_id: $geneId }) {
      alternative_symbols
      name
      stable_id
      unversioned_stable_id
      symbol
      transcripts {
        stable_id
        product_generating_contexts {
          product_type
        }
      }
      slice {
        region {
          sequence {
            checksum
          }
        }
        strand {
          code
        }
        location {
          start
          end
          length
        }
      }
      metadata {
        biotype {
          label
          value
          definition
        }
        name {
          accession_id
          url
        }
      }
    }
  }
`,transcriptSummaryQuery=esm.J1`
  query TranscriptSummary($genomeId: String!, $transcriptId: String!) {
    transcript(by_id: { genome_id: $genomeId, stable_id: $transcriptId }) {
      stable_id
      unversioned_stable_id
      external_references {
        accession_id
        url
        source {
          id
        }
      }
      spliced_exons {
        relative_location {
          start
          end
        }
        exon {
          stable_id
          slice {
            location {
              length
            }
          }
        }
      }
      product_generating_contexts {
        product_type
        default
        cds {
          protein_length
          sequence {
            checksum
          }
        }
        cdna {
          sequence {
            checksum
          }
        }
        phased_exons {
          start_phase
          end_phase
          exon {
            stable_id
          }
        }
        product {
          stable_id
          external_references {
            accession_id
            url
            source {
              id
            }
          }
          sequence {
            checksum
          }
        }
      }
      slice {
        strand {
          code
        }
        location {
          start
          end
          length
        }
        region {
          name
          sequence {
            checksum
          }
        }
      }
      metadata {
        biotype {
          label
          value
          definition
        }
        canonical {
          value
          label
          definition
        }
        mane {
          value
          label
          definition
        }
      }
      gene {
        name
        stable_id
        unversioned_stable_id
        symbol
      }
    }
  }
`,transcriptZmenuQuery=esm.J1`
  query Transcript($genomeId: String!, $transcriptId: String!) {
    transcript(by_id: { genome_id: $genomeId, stable_id: $transcriptId }) {
      product_generating_contexts {
        product_type
      }
      gene {
        stable_id
      }
    }
  }
`,variantDetailsQuery=esm.J1`
  query VariantDetails($genomeId: String!, $variantId: String!) {
    variant(by_id: { genome_id: $genomeId, variant_id: $variantId }) {
      name
      alternative_names {
        name
        url
      }
      slice {
        location {
          start
          end
        }
        region {
          name
        }
      }
      allele_type {
        value
      }
      primary_source {
        url
        source {
          name
          release
        }
      }
      prediction_results {
        score
        result
        analysis_method {
          tool
        }
      }
      alleles {
        name
        allele_type {
          value
        }
        slice {
          location {
            start
            end
          }
        }
        allele_sequence
        reference_sequence
        phenotype_assertions {
          feature
        }
        prediction_results {
          score
          result
          analysis_method {
            tool
          }
        }
        population_frequencies {
          is_minor_allele
          is_hpmaf
          allele_frequency
        }
      }
    }
  }
`,regionQuery=esm.J1`
  query Region($genomeId: String!, $regionName: String!) {
    region(by_name: { genome_id: $genomeId, name: $regionName }) {
      name
      length
      code
      topology
    }
  }
`,genomeBrowserApiSlice=graphqlApiSlice.A.injectEndpoints({endpoints:builder=>({getTrackPanelGene:builder.query({query:params=>({url:config_0.A.coreApiUrl,body:queries_trackPanelGeneQuery(params)})}),gbGeneSummary:builder.query({query:params=>({url:config_0.A.coreApiUrl,body:geneSummaryQuery,variables:params})}),gbTranscriptSummary:builder.query({query:params=>({url:config_0.A.coreApiUrl,body:transcriptSummaryQuery,variables:params})}),gbTranscriptInZmenu:builder.query({query:params=>({url:config_0.A.coreApiUrl,body:transcriptZmenuQuery,variables:params})}),gbRegion:builder.query({query:params=>({url:config_0.A.coreApiUrl,body:regionQuery,variables:params})}),gbVariant:builder.query({query:params=>({url:config_0.A.variationApiUrl,body:variantDetailsQuery,variables:params})})})}),genomeBrowserRestApiSlice=restSlice.A.injectEndpoints({endpoints:builder=>({genomeTracks:builder.query({query:genomeId=>({url:`${config_0.A.tracksApiBaseUrl}/track_categories/${genomeId}`}),transformResponse:response=>response.track_categories.map((category=>({...category,track_list:category.track_list.map((track=>({...track,track_id:track.track_id=track.trigger.at(-1)})))})))})})}),{getTrackPanelGene,gbRegion:getGBRegion}=genomeBrowserApiSlice.endpoints,{useGetTrackPanelGeneQuery,useGbGeneSummaryQuery,useGbTranscriptSummaryQuery,useGbTranscriptInZmenuQuery,useGbRegionQuery,useGbVariantQuery}=genomeBrowserApiSlice,{useGenomeTracksQuery}=genomeBrowserRestApiSlice;var loading_state=__webpack_require__("./src/shared/types/loading-state.ts");var focusObjectHelpers=__webpack_require__("./src/shared/helpers/focusObjectHelpers.ts"),focusObjectSelectors=__webpack_require__("./src/content/app/genome-browser/state/focus-object/focusObjectSelectors.ts");class LRUCache{currentSize=0;constructor(options={}){if(options.size&&options.size<=0)throw new Error("Cache size must be a positive integer");this.size=options.size||1e3,this.maxAge=options.maxAge,this.head=null,this.tail=null,this.listNodesMap=new Map}get(key){const cachedNode=this.listNodesMap.get(key);if(cachedNode)return this.isExpiredNode(cachedNode)?void this.removeNode(cachedNode):(this.moveNodeToHead(cachedNode),cachedNode.timestamp=Date.now(),cachedNode.value)}set(key,value){const savedNode=this.listNodesMap.get(key);savedNode?(this.moveNodeToHead(savedNode),savedNode.value=value):this.addNode(key,value)}reset(){this.head=null,this.tail=null,this.currentSize=0,this.listNodesMap.clear()}isExpiredNode(node){return!!this.maxAge&&Date.now()-node.timestamp>this.maxAge}moveNodeToHead(node){const previousNode=node.previous,nextNode=node.next;previousNode&&(previousNode.next=nextNode),nextNode&&(nextNode.previous=previousNode),this.tail===node&&(this.tail=previousNode);const formerHeadNode=this.head;this.head=node,node.next=formerHeadNode,node.previous=null,formerHeadNode.previous=node,node.timestamp=Date.now()}addNode(key,value){const newNode=new LinkedListNode({key,value,timestamp:Date.now()});if(0===this.currentSize)this.head=newNode,this.tail=newNode;else if(this.currentSize===this.size){const newTail=this.tail.previous;this.removeNode(this.tail),this.tail=newTail,this.moveNodeToHead(newNode)}else this.moveNodeToHead(newNode);this.listNodesMap.set(key,newNode),this.currentSize++}removeNode(node){const{previous,next,key}=node;node.previous=null,node.next=null,node.value=null,previous&&(previous.next=next),next&&(next.previous=previous),this.listNodesMap.delete(key),this.currentSize--}}class LinkedListNode{next=null;previous=null;constructor(options){this.key=options.key,this.value=options.value,this.timestamp=options.timestamp}}let HTTPMethod=function(HTTPMethod){return HTTPMethod.GET="GET",HTTPMethod.POST="POST",HTTPMethod.PATCH="PATCH",HTTPMethod.PUT="PUT",HTTPMethod.DELETE="DELETE",HTTPMethod}({});const defaultMethod=HTTPMethod.GET,defaultHeaders={Accept:"application/json"};new class ApiService{constructor(config){this.host=config.host||"",this.cache=new LRUCache({maxAge:36e5})}getFetch(){return fetch}buildFetchOptions(options){const headers={...defaultHeaders,...options.headers};return options.method&&[HTTPMethod.POST,HTTPMethod.PUT,HTTPMethod.PATCH].includes(options.method)&&!headers.hasOwnProperty("Content-Type")&&(headers["Content-Type"]="application/json"),{method:options.method||defaultMethod,headers,body:options.body,signal:options.signal}}async fetch(endpoint,options={}){const host=options.host||this.host,fetch=this.getFetch(),url=options.preserveEndpoint?endpoint:`${host}${endpoint}`;if(!options.noCache){const cachedItem=this.cache.get(url);if(cachedItem)return cachedItem}const fetchOptions=this.buildFetchOptions(options);try{const response=await fetch(url,fetchOptions);if(!response.ok)throw await this.handleError(response);const processedResponse=await this.handleResponse(response,fetchOptions);return options.noCache||this.cache.set(url,processedResponse),processedResponse}catch(error){if("AbortError"!==error.name)throw error}}async handleError(response){let errorJson;try{errorJson=await response.json()}finally{return{status:response.status,...errorJson}}}async handleResponse(response,options){return options.headers&&"application/json"===options.headers.Accept?await response.json():await response.text()}}({host:config_0.A.apiHost});const buildLoadedObject=payload=>({[payload.id]:{data:payload.data,loadingStatus:loading_state.G.SUCCESS}}),buildFocusLocationObject=payload=>{const{genomeId,objectId:regionId}=payload,[chromosome,start,end]=function getChrLocationFromStr(chrLocationStr){const[regionName,coordinates]=chrLocationStr.split(":");if(2!==coordinates.split("-").length)throw new Error("There can only be a start and an end coordinate in a location string");const[startBp,endBp]=coordinates.split("-"),invalidCoordinateRegex=/[^\d]/;if(startBp.match(invalidCoordinateRegex)||endBp.match(invalidCoordinateRegex))throw new Error("Start and end coordinates of a region must consist of digits only");return[regionName,parseInt(startBp,10),parseInt(endBp,10)]}(regionId);return{type:"location",genome_id:genomeId,object_id:(0,focusObjectHelpers.Fz)(payload),label:regionId,location:{chromosome,start,end}}},buildFocusVariantObject=payload=>{const{genomeId,objectId,variantId}=payload,variantName=variantId.split(":")[2];return{type:"variant",genome_id:genomeId,object_id:objectId,variant_id:variantId,label:variantName,location:{chromosome:"13",start:1e6,end:1000001}}},fetchFocusObject=(0,redux_toolkit_modern.zD)("genome-browser/fetch-focus-object",(async(payload,thunkAPI)=>{const state=thunkAPI.getState();"string"==typeof payload&&(payload=(0,focusObjectHelpers.ww)(payload));const{genomeId,objectId}=payload,focusObjectId=(0,focusObjectHelpers.Fz)(payload),focusObjectLoadingStatus=(0,focusObjectSelectors.E9)(state,focusObjectId);if(status=focusObjectLoadingStatus,![loading_state.G.LOADING,loading_state.G.SUCCESS].includes(status)){var status,id;if("location"===payload.type){const focusLocationObject=buildFocusLocationObject({...payload,type:"location"});return buildLoadedObject({id:focusObjectId,data:focusLocationObject})}try{if(thunkAPI.fulfillWithValue((id=focusObjectId,{[id]:{loadingStatus:loading_state.G.LOADING,data:null}})),"gene"===payload.type)return await fetchFocusGene({genomeId,geneId:objectId,objectId:focusObjectId},thunkAPI);if("variant"===payload.type)return await fetchFocusVariant({genomeId,variantId:objectId,objectId:focusObjectId})}catch(error){thunkAPI.rejectWithValue(error)}}})),fetchFocusGene=async(payload,thunkApi)=>{const{genomeId,geneId,objectId}=payload,{dispatch}=thunkApi,dispatchedPromise=dispatch(getTrackPanelGene.initiate({genomeId,geneId})),result=await dispatchedPromise;dispatchedPromise.unsubscribe();const geneFocusObject=(params=>{const{slice:{location:{start,end},region:{name:chromosome},strand:{code:strand}}}=params.gene;return{type:"gene",object_id:params.objectId,genome_id:params.genomeId,label:params.gene.symbol||params.gene.stable_id,location:{chromosome,start,end},stable_id:params.gene.unversioned_stable_id,versioned_stable_id:params.gene.stable_id,bio_type:params.gene.metadata.biotype.label,strand,visibleTranscriptIds:null}})({objectId,genomeId,gene:result.data?.gene}),storedFocusGeneData=await(0,focusObjectStorageService.qJ)(objectId);return geneFocusObject.visibleTranscriptIds=storedFocusGeneData?.visibleTranscriptIds??null,buildLoadedObject({id:objectId,data:geneFocusObject})},fetchFocusVariant=async payload=>buildLoadedObject({id:payload.objectId,data:buildFocusVariantObject(payload)}),updateFocusGeneTranscriptsVisibility=(0,redux_toolkit_modern.zD)("genome-browser/udpate-focus-gene-transcripts-visibility",(async(payload,thunkAPI)=>{const{focusGeneId,visibleTranscriptIds}=payload,state=thunkAPI.getState(),focusGene=state.browser.focusObjects[focusGeneId]?.data;if(!(0,isGeneFocusObject.A)(focusGene))return null;const updatedFocusGene={...focusGene,visibleTranscriptIds};return await focusObjectStorageService.n_(focusGeneId,updatedFocusGene),updatedFocusGene})),focus_object_focusObjectSlice=(0,redux_toolkit_modern.Z0)({name:"genome-browser-focus-object",initialState:{},reducers:{},extraReducers:builder=>{builder.addCase(fetchFocusObject.fulfilled,((state,action)=>{state=Object.assign(state,action.payload)})),builder.addCase(updateFocusGeneTranscriptsVisibility.fulfilled,((state,action)=>{const focusGene=action.payload;focusGene&&(state[focusGene.object_id].data=focusGene)}))}}).reducer},"./src/content/app/genome-browser/state/focus-object/isGeneFocusObject.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=object=>"gene"===object?.type},"./src/content/app/genome-browser/state/track-panel/trackPanelSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>track_panel_trackPanelSlice});__webpack_require__("./node_modules/core-js/modules/web.dom-exception.stack.js"),__webpack_require__("./node_modules/core-js/modules/web.structured-clone.js");var redux_toolkit_modern=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs"),browserStorageService=__webpack_require__("./src/content/app/genome-browser/services/browserStorageService.ts"),focusObjectHelpers=__webpack_require__("./src/shared/helpers/focusObjectHelpers.ts");__webpack_require__("./src/content/app/genome-browser/state/browser-general/browserGeneralSelectors.ts");__webpack_require__("./src/content/app/genome-browser/state/browser-sidebar-modal/browserSidebarModalSlice.ts");let TrackSet=function(TrackSet){return TrackSet.GENOMIC="Genomic",TrackSet.VARIATION="Variation",TrackSet.REGULATION="Regulation",TrackSet}({});const trackPanelSlice_defaultTrackPanelStateForGenome={selectedTrackPanelTab:TrackSet.GENOMIC,isTrackPanelOpened:!0,highlightedTrackId:"",collapsedTrackIds:[]},updateTrackPanelTabForNewFocusObject=(0,redux_toolkit_modern.zD)("track-panel-slice/updateTrackPanelTabWhenFocusObjectChanges",(params=>{const{genomeId,focusObjectId}=params,{type}=(0,focusObjectHelpers.ww)(focusObjectId);let trackPanelTab;return trackPanelTab="variant"===type?TrackSet.VARIATION:TrackSet.GENOMIC,{genomeId,trackPanelTab}})),getPersistentTrackPanelStateForGenome=genomeId=>browserStorageService.Ay.getTrackPanels()[genomeId]||{},trackPanelSlice=(0,redux_toolkit_modern.Z0)({name:"genome-browser-track-panel",initialState:{},reducers:{setInitialTrackPanelDataForGenome(state,action){const{activeGenomeId}=action.payload;var genomeId;state[activeGenomeId]||(state[activeGenomeId]=(genomeId=activeGenomeId)?{...trackPanelSlice_defaultTrackPanelStateForGenome,...getPersistentTrackPanelStateForGenome(genomeId)}:trackPanelSlice_defaultTrackPanelStateForGenome)},updateTrackPanelForGenome(state,action){const{activeGenomeId,data}=action.payload;state[activeGenomeId]={...state[activeGenomeId],...data}},deleteGenomeTrackPanelData(state,action){delete state[action.payload]}},extraReducers:builder=>{builder.addCase(updateTrackPanelTabForNewFocusObject.fulfilled,((state,action)=>{const{genomeId,trackPanelTab}=action.payload;state[genomeId]||(state[genomeId]=structuredClone(trackPanelSlice_defaultTrackPanelStateForGenome)),state[genomeId].selectedTrackPanelTab!==trackPanelTab&&(state[genomeId].selectedTrackPanelTab=trackPanelTab)}))}}),{setInitialTrackPanelDataForGenome,updateTrackPanelForGenome,deleteGenomeTrackPanelData}=trackPanelSlice.actions,track_panel_trackPanelSlice=trackPanelSlice.reducer},"./src/content/app/genome-browser/state/track-settings/trackSettingsConstants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{PZ:()=>getDefaultGeneTrackSettings,S:()=>TrackType,Vm:()=>getDefaultFocusVariantTrackSettings,_P:()=>getDefaultRegularTrackSettings,p_:()=>getDefaultFocusGeneTrackSettings});let TrackType=function(TrackType){return TrackType.GENE="gene",TrackType.VARIANT="variant",TrackType.FOCUS_GENE="focus-gene",TrackType.FOCUS_VARIANT="focus-variant",TrackType.REGULAR="regular",TrackType}({});const getDefaultGeneTrackSettings=()=>({several:!1,"transcript-label":!1,name:!1,label:!0,isVisible:!0}),getDefaultFocusGeneTrackSettings=()=>{const geneTrackSettings=getDefaultGeneTrackSettings();return delete geneTrackSettings.isVisible,geneTrackSettings},getDefaultFocusVariantTrackSettings=()=>{const variantTrackSettings={"label-snv-id":!1,"label-snv-alleles":!1,"label-other-id":!1,"label-other-alleles":!1,"show-extents":!0,name:!1,isVisible:!0};return delete variantTrackSettings.isVisible,variantTrackSettings},getDefaultRegularTrackSettings=()=>({name:!1,isVisible:!0})},"./src/content/app/genome-browser/state/track-settings/trackSettingsSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>track_settings_trackSettingsSlice});__webpack_require__("./node_modules/core-js/modules/web.dom-exception.stack.js"),__webpack_require__("./node_modules/core-js/modules/web.structured-clone.js");var redux_toolkit_modern=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs"),trackSettingsStorageService=__webpack_require__("./src/content/app/genome-browser/services/track-settings/trackSettingsStorageService.ts"),reselect=__webpack_require__("./node_modules/reselect/dist/reselect.mjs");__webpack_require__("./src/content/app/genome-browser/state/browser-general/browserGeneralSelectors.ts");const getAllTrackSettingsForGenome=(state,genomeId)=>state.browser.trackSettings[genomeId]??null;(0,reselect.Mz)(getAllTrackSettingsForGenome,(trackSettingsForGenome=>{if(!trackSettingsForGenome)return null;const settings={};for(const[trackId,trackSettings]of Object.entries(trackSettingsForGenome.settingsForIndividualTracks))"focus"!==trackId&&"focus-variant"!==trackId&&(settings[trackId]=trackSettings);return settings}));__webpack_require__("./src/content/app/genome-browser/state/track-settings/trackSettingsConstants.ts");const defaultTrackSettingsForGenome={settingsForIndividualTracks:{}},updateTrackSettingsAndSave=(0,redux_toolkit_modern.zD)("genome-browser-track-settings/update-track-settings-and-save",(async(params,thunkAPI)=>{const{genomeId,setting,isEnabled}=params,state=thunkAPI.getState(),allTrackSettingsForGenome=getAllTrackSettingsForGenome(state,genomeId);if(!allTrackSettingsForGenome)return;const newTrackSettingsForGenome=structuredClone(allTrackSettingsForGenome),trackMap=newTrackSettingsForGenome.settingsForIndividualTracks;for(const[,track]of Object.entries(trackMap))setting in track.settings&&(track.settings[setting]=isEnabled,await trackSettingsStorageService.K1(genomeId,track));return{genomeId,settingsForGenome:newTrackSettingsForGenome}})),updateTrackVisibilityAndSave=(0,redux_toolkit_modern.zD)("genome-browser-track-settings/update-track-visibility-and-save",(async(params,thunkAPI)=>{const{genomeId,trackId,isVisible}=params,state=thunkAPI.getState(),allTrackSettingsForGenome=getAllTrackSettingsForGenome(state,genomeId),trackSettings=allTrackSettingsForGenome?.settingsForIndividualTracks[trackId];if(!trackSettings)return;const newTrackSettings=structuredClone(trackSettings);return newTrackSettings.settings.isVisible=isVisible,await trackSettingsStorageService.K1(genomeId,newTrackSettings),{genomeId,trackId,trackSettings:newTrackSettings}})),trackSettingsSlice=(0,redux_toolkit_modern.Z0)({name:"genome-track-settings",initialState:{},reducers:{setInitialTrackSettingsForGenome(state,action){const{genomeId,trackSettings}=action.payload;state[genomeId]={...defaultTrackSettingsForGenome,settingsForIndividualTracks:{...state[genomeId]?.settingsForIndividualTracks,...trackSettings}}},addSettingsForTrack(state,action){const{genomeId,trackId,trackSettings}=action.payload;state[genomeId]||(state[genomeId]={settingsForIndividualTracks:{}}),state[genomeId].settingsForIndividualTracks[trackId]=trackSettings},deleteTrackSettingsForGenome(state,action){delete state[action.payload]}},extraReducers:builder=>{builder.addCase(updateTrackSettingsAndSave.fulfilled,((state,action)=>{if(!action.payload)return;const{genomeId,settingsForGenome}=action.payload;state[genomeId]=settingsForGenome})),builder.addCase(updateTrackVisibilityAndSave.fulfilled,((state,action)=>{if(!action.payload)return;const{genomeId,trackId,trackSettings}=action.payload;state[genomeId].settingsForIndividualTracks[trackId]=trackSettings}))}}),{setInitialTrackSettingsForGenome,deleteTrackSettingsForGenome,addSettingsForTrack}=trackSettingsSlice.actions,track_settings_trackSettingsSlice=trackSettingsSlice.reducer},"./src/content/app/species-selector/services/speciesSelectorStorageConstants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{j:()=>SELECTED_SPECIES_STORE_NAME});const SELECTED_SPECIES_STORE_NAME="selected-species"},"./src/content/app/species-selector/services/speciesSelectorStorageService.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Fc:()=>saveMultipleSelectedSpecies,pz:()=>getAllSelectedSpecies});var src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/services/indexeddb-service.ts"),_speciesSelectorStorageConstants__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/content/app/species-selector/services/speciesSelectorStorageConstants.ts");const saveMultipleSelectedSpecies=async speciesList=>{try{const transaction=(await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.getDB()).transaction(_speciesSelectorStorageConstants__WEBPACK_IMPORTED_MODULE_1__.j,"readwrite");for(const species of speciesList)await transaction.store.put(species,species.genome_id);await transaction.done}catch{}},getAllSelectedSpecies=async()=>{try{return(await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.getDB()).getAll(_speciesSelectorStorageConstants__WEBPACK_IMPORTED_MODULE_1__.j)}catch{return[]}}},"./src/content/app/species-selector/state/species-selector-general-slice/speciesSelectorGeneralSelectors.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{VF:()=>getCommittedSpecies,VV:()=>getCommittedSpeciesById,XC:()=>getSpeciesNameDisplayOption});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.find.js");var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/reselect/dist/reselect.mjs");const getCommittedSpecies=state=>state.speciesSelector.general.committedItems,getSpeciesNameDisplayOption=state=>state.speciesSelector.general.speciesNameDisplayOption,getCommittedSpeciesById=(state,genomeId)=>{if(!genomeId)return null;return getCommittedSpecies(state).find((species=>genomeId===species.genome_id))??null};(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_3__.Mz)((state=>getCommittedSpecies(state)),(committedSpecies=>committedSpecies.filter((({isEnabled})=>isEnabled))))},"./src/content/app/species-selector/state/species-selector-general-slice/speciesSelectorGeneralSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>species_selector_general_slice_speciesSelectorGeneralSlice,aG:()=>loadStoredSpecies,vG:()=>setSpeciesNameDisplayOption,qs:()=>updateCommittedSpecies});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.map.js");var redux_toolkit_modern=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs");const speciesNameDisplayOptions=["common-name_assembly-name","common-name_type_assembly-name","scientific-name_assembly-name","scientific-name_type_assembly-name","assembly-accession-id"],defaultSpeciesNameDisplayOption=speciesNameDisplayOptions[0];var speciesSelectorStorageService=__webpack_require__("./src/content/app/species-selector/services/speciesSelectorStorageService.ts"),indexeddb_service=(__webpack_require__("./src/shared/services/previouslyViewedObjectsStorageService.ts"),__webpack_require__("./src/services/indexeddb-service.ts")),generalUIStorageConstants=__webpack_require__("./src/shared/services/generalUIStorageConstants.ts");const isValidSpeciesNameDisplayOption=option=>speciesNameDisplayOptions.includes(option);__webpack_require__("./src/content/app/genome-browser/state/browser-general/browserGeneralSlice.ts"),__webpack_require__("./src/content/app/entity-viewer/state/general/entityViewerGeneralSlice.ts");var speciesSelectorGeneralSelectors=__webpack_require__("./src/content/app/species-selector/state/species-selector-general-slice/speciesSelectorGeneralSelectors.ts");(0,redux_toolkit_modern.VP)("species-selector/fetchSpeciesSearchResults");const loadStoredSpecies=(0,redux_toolkit_modern.zD)("species-selector/loadStoredSpecies",(async()=>await(0,speciesSelectorStorageService.pz)())),initialState={committedItems:[],speciesNameDisplayOption:defaultSpeciesNameDisplayOption},setSpeciesNameDisplayOption=((0,redux_toolkit_modern.zD)("species-selector/commit-selected-species",((selectedSpecies,thunkAPI)=>{const dispatch=thunkAPI.dispatch,getState=thunkAPI.getState,alreadyCommittedSpecies=(0,speciesSelectorGeneralSelectors.VF)(getState()),newSpeciesToCommit=(selectedSpecies=>selectedSpecies.map((species=>({genome_id:species.genome_id,genome_tag:species.genome_tag,common_name:species.common_name,scientific_name:species.scientific_name,species_taxonomy_id:species.species_taxonomy_id,assembly:{accession_id:species.assembly.accession_id,name:species.assembly.name},is_reference:species.is_reference,type:species.type,isEnabled:!0}))))(selectedSpecies),newCommittedSpecies=[...newSpeciesToCommit,...alreadyCommittedSpecies];dispatch(updateCommittedSpecies(newCommittedSpecies)),(0,speciesSelectorStorageService.Fc)(newCommittedSpecies)})),(0,redux_toolkit_modern.zD)("species-selector/setSpeciesNameDisplayOption",(option=>((async option=>{await indexeddb_service.A.set(generalUIStorageConstants.k,generalUIStorageConstants.U,option)})(option),option)))),loadSpeciesNameDisplayOption=(0,redux_toolkit_modern.zD)("species-selector/loadSpeciesNameDisplayOption",(()=>(async()=>{const savedOption=await indexeddb_service.A.get(generalUIStorageConstants.k,generalUIStorageConstants.U);return savedOption&&isValidSpeciesNameDisplayOption(savedOption)?savedOption:null})())),speciesSelectorGeneralSlice=(0,redux_toolkit_modern.Z0)({name:"species-selector-general",initialState,reducers:{updateCommittedSpecies(state,action){state.committedItems=action.payload},setSpeciesNameDisplayOption(state,action){state.speciesNameDisplayOption=action.payload}},extraReducers:builder=>{builder.addCase(loadStoredSpecies.fulfilled,((state,action)=>{state.committedItems=action.payload})),builder.addCase(setSpeciesNameDisplayOption.fulfilled,((state,action)=>{state.speciesNameDisplayOption=action.payload})),builder.addCase(loadSpeciesNameDisplayOption.fulfilled,((state,action)=>{action.payload&&(state.speciesNameDisplayOption=action.payload)}))}}),{updateCommittedSpecies}=speciesSelectorGeneralSlice.actions,species_selector_general_slice_speciesSelectorGeneralSlice=speciesSelectorGeneralSlice.reducer},"./src/content/app/tools/blast/services/blastStorageService.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{EH:()=>deleteBlastSubmission,EY:()=>saveBlastSubmission,Pr:()=>getAllBlastSubmissions,c3:()=>deleteExpiredBlastSubmissions,uB:()=>updateBlastSubmission,ub:()=>updateSavedBlastJob});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.find.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.reduce.js");var src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/services/indexeddb-service.ts"),_blastStorageServiceConstants__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/content/app/tools/blast/services/blastStorageServiceConstants.ts"),src_content_app_tools_blast_utils_blastSubmisionTypeNarrowing__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/content/app/tools/blast/utils/blastSubmisionTypeNarrowing.ts");const saveBlastSubmission=async(submissionId,submission)=>{await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_3__.A.set(_blastStorageServiceConstants__WEBPACK_IMPORTED_MODULE_4__.Zu,submissionId,submission)},getAllBlastSubmissions=async()=>{const db=await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_3__.A.getDB();return(await db.getAll(_blastStorageServiceConstants__WEBPACK_IMPORTED_MODULE_4__.Zu)).reduce(((obj,submission)=>({...obj,[submission.id]:submission})),{})},getBlastSubmission=async submissionId=>await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_3__.A.get(_blastStorageServiceConstants__WEBPACK_IMPORTED_MODULE_4__.Zu,submissionId),updateBlastSubmission=async(submissionId,fragment)=>{const submission=await getBlastSubmission(submissionId);if(!submission)return;const updatedSubmission={...submission,...fragment};await saveBlastSubmission(submissionId,updatedSubmission)},updateSavedBlastJob=async params=>{const{submissionId,jobId,fragment}=params,submission=await getBlastSubmission(submissionId);if(!(0,src_content_app_tools_blast_utils_blastSubmisionTypeNarrowing__WEBPACK_IMPORTED_MODULE_5__.Hs)(submission))return;const job=submission?.results?.find((job=>job.jobId===jobId));job&&(Object.assign(job,fragment),await saveBlastSubmission(submissionId,submission))},deleteBlastSubmission=async submissionId=>{await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_3__.A.delete(_blastStorageServiceConstants__WEBPACK_IMPORTED_MODULE_4__.Zu,submissionId)},deleteExpiredBlastSubmissions=async()=>{const transaction=(await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_3__.A.getDB()).transaction(_blastStorageServiceConstants__WEBPACK_IMPORTED_MODULE_4__.Zu,"readwrite");for await(const cursor of transaction.store){const submission=cursor.value,{submittedAt}=submission;submittedAt<Date.now()-_blastStorageServiceConstants__WEBPACK_IMPORTED_MODULE_4__.nd&&cursor.delete()}await transaction.done}},"./src/content/app/tools/blast/services/blastStorageServiceConstants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Zu:()=>BLAST_SUBMISSIONS_STORE_NAME,nd:()=>BLAST_SUBMISSION_STORAGE_DURATION});var src_shared_constants_timeConstants__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/shared/constants/timeConstants.ts");const BLAST_SUBMISSIONS_STORE_NAME="blast-submissions",BLAST_SUBMISSION_STORAGE_DURATION=(src_shared_constants_timeConstants__WEBPACK_IMPORTED_MODULE_0__.$0,src_shared_constants_timeConstants__WEBPACK_IMPORTED_MODULE_0__.hN,28*src_shared_constants_timeConstants__WEBPACK_IMPORTED_MODULE_0__.$0)},"./src/content/app/tools/blast/state/blast-api/blastApiSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ng:()=>submitBlast});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.every.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.map.js");var redux_toolkit_modern=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs"),config=__webpack_require__("./config.ts"),restSlice=__webpack_require__("./src/shared/state/api-slices/restSlice.ts");const LINE_LENGTH=60,toFasta=(sequence,options={})=>{const{header,value:rawSequence}=sequence,{lineLength=LINE_LENGTH}=options,formattedSequence=[];header&&formattedSequence.push(`>${header}`);let row="";for(let i=0;i<rawSequence.length;i++){row+=rawSequence[i];const isAtEndOfLine=(i+1)%lineLength==0;(i===rawSequence.length-1||isAtEndOfLine)&&(formattedSequence.push(row),row="")}return formattedSequence.join("\n")},blastApiSlice=restSlice.A.injectEndpoints({endpoints:builder=>({blastConfig:builder.query({query:()=>({url:`${config.A.toolsApiBaseUrl}/blast/config`}),keepUnusedDataFor:3600}),submitBlast:builder.mutation({async queryFn(payload,queryApi,_,baseQuery){const querySequences=payload.sequences.map((item=>({id:item.id,value:toFasta({header:item.header,value:item.value})}))),body={genome_ids:payload.species.map((({genome_id})=>genome_id)),query_sequences:querySequences,parameters:payload.parameters};try{const{data:responseData,error:responseError}=await baseQuery({url:`${config.A.toolsApiBaseUrl}/blast/job`,method:"POST",body});if(responseData)return onlyContainsRejectedJobs(responseData)?{error:{status:422,data:prepareFailedSubmissionPayload(payload,responseData)}}:{data:prepareSuccessfulSubmissionPayload(payload,responseData)};throw responseError??{error:"Blast submission failed"}}catch(error){return{error:{status:422,data:prepareFailedSubmissionPayload(payload,error?.data??{})}}}}}),fetchAllBlastJobs:builder.query({queryFn:async(jobIds,_queryApi,_extraOptions,baseQuery)=>{try{const format="json";return{data:(await commonFetchAllBlastJobs(jobIds,format,baseQuery)).map((result=>result.data))}}catch{return{error:"Some BLAST jobs failed to load"}}}}),fetchAllBlastRawResults:builder.query({queryFn:async(jobIds,_queryApi,_extraOptions,baseQuery)=>{try{const format="raw";return{data:(await commonFetchAllBlastJobs(jobIds,format,baseQuery)).map((result=>result.data))}}catch{return{error:"Some BLAST jobs failed to load"}}}})})}),commonFetchAllBlastJobs=(jobIds,format,baseQuery)=>{const requestPromises=jobIds.map((jobId=>((jobId,format)=>("raw"===format&&(format="out"),`${config.A.toolsApiBaseUrl}/blast/jobs/result/${jobId}/${format}`))(jobId,format))).map((url=>Promise.resolve(baseQuery(url)).then((result=>{if(result.error)throw result.error;return result}))));return Promise.all(requestPromises)},onlyContainsRejectedJobs=response=>response.jobs.every((job=>"error"in job)),prepareSuccessfulSubmissionPayload=(payload,responseData)=>{const{submission_id:submissionId,jobs}=responseData,results=jobs.map((job=>({jobId:"job_id"in job?job.job_id:(0,redux_toolkit_modern.Ak)(),genomeId:job.genome_id,sequenceId:job.sequence_id,status:"error"in job?"FAILURE":"RUNNING",data:null})));return{submissionId,submission:{id:submissionId,submittedData:{species:payload.species,sequences:payload.sequences,preset:payload.preset,sequenceType:payload.sequenceType,submissionName:payload.submissionName,parameters:payload.parameters},results,submittedAt:Date.now(),seen:!1}}},prepareFailedSubmissionPayload=(payload,responseData)=>{let submissionId,hasServerGeneratedId=!1,errorMessage="Blast submission failed";return"submission_id"in responseData&&responseData.submission_id?(submissionId=responseData.submission_id,hasServerGeneratedId=!0):submissionId=(0,redux_toolkit_modern.Ak)(),"error"in responseData&&(errorMessage=responseData.error),{submissionId,submission:{id:submissionId,hasServerGeneratedId,submittedData:{species:payload.species,sequences:payload.sequences,preset:payload.preset,submissionName:payload.submissionName,parameters:payload.parameters},submittedAt:Date.now(),error:errorMessage}}},{useBlastConfigQuery,useSubmitBlastMutation,useFetchAllBlastJobsQuery}=blastApiSlice,{submitBlast,fetchAllBlastJobs,fetchAllBlastRawResults}=blastApiSlice.endpoints},"./src/content/app/tools/blast/state/blast-results/blastResultsSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>__WEBPACK_DEFAULT_EXPORT__,EH:()=>deleteBlastSubmission,GB:()=>restoreBlastSubmissions,lh:()=>updateJob});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.find.js");var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs"),src_content_app_tools_blast_services_blastStorageService__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/content/app/tools/blast/services/blastStorageService.ts"),src_content_app_tools_blast_utils_blastSubmisionTypeNarrowing__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/content/app/tools/blast/utils/blastSubmisionTypeNarrowing.ts"),_blast_api_blastApiSlice__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/content/app/tools/blast/state/blast-api/blastApiSlice.ts");const restoreBlastSubmissions=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_5__.zD)("blast-results/restore-blast-submissions",(async()=>(await(0,src_content_app_tools_blast_services_blastStorageService__WEBPACK_IMPORTED_MODULE_2__.c3)(),await(0,src_content_app_tools_blast_services_blastStorageService__WEBPACK_IMPORTED_MODULE_2__.Pr)()||{}))),deleteBlastSubmission=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_5__.zD)("blast-results/delete-blast-submissions",(async submissionId=>(await(0,src_content_app_tools_blast_services_blastStorageService__WEBPACK_IMPORTED_MODULE_2__.EH)(submissionId),submissionId))),markBlastSubmissionAsSeen=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_5__.zD)("blast-results/mark-blast-submission-as-seen",(async submissionId=>(await(0,src_content_app_tools_blast_services_blastStorageService__WEBPACK_IMPORTED_MODULE_2__.uB)(submissionId,{seen:!0}),submissionId))),blastResultsSlice=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_5__.Z0)({name:"blast-results",initialState:{submissions:{},ui:{unviewedJobsPage:{collapsedSubmissionIds:[]},viewedJobsPage:{collapsedSubmissionIds:[]}}},reducers:{updateJob(state,action){const{submissionId,jobId,fragment}=action.payload,submission=state.submissions[submissionId];if(!(0,src_content_app_tools_blast_utils_blastSubmisionTypeNarrowing__WEBPACK_IMPORTED_MODULE_3__.Hs)(submission))return;const job=submission.results.find((job=>job.jobId===jobId));job&&Object.assign(job,fragment)},updateSubmissionUi(state,action){const{fragment}=action.payload;state.ui={...state.ui,...fragment}}},extraReducers:builder=>{builder.addCase(restoreBlastSubmissions.fulfilled,((state,{payload})=>{state.submissions=payload})),builder.addCase(deleteBlastSubmission.fulfilled,((state,{payload})=>{const submissionId=payload;delete state.submissions[submissionId]})),builder.addCase(markBlastSubmissionAsSeen.fulfilled,((state,{payload})=>{const submissionId=payload,submission=state.submissions[submissionId];(0,src_content_app_tools_blast_utils_blastSubmisionTypeNarrowing__WEBPACK_IMPORTED_MODULE_3__.Hs)(submission)&&(submission.seen=!0)})),builder.addMatcher(_blast_api_blastApiSlice__WEBPACK_IMPORTED_MODULE_4__.Ng.matchFulfilled,((state,{payload})=>{const{submissionId,submission}=payload;state.submissions[submissionId]=submission})),builder.addMatcher(_blast_api_blastApiSlice__WEBPACK_IMPORTED_MODULE_4__.Ng.matchRejected,((state,{payload})=>{const payloadData=payload?.data;if(payloadData){const{submissionId,submission}=payloadData;state.submissions[submissionId]=submission}}))}}),{updateJob,updateSubmissionUi}=blastResultsSlice.actions,__WEBPACK_DEFAULT_EXPORT__=blastResultsSlice.reducer},"./src/content/app/tools/blast/utils/blastSubmisionTypeNarrowing.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Hs:()=>isSuccessfulBlastSubmission,wG:()=>isFailedBlastSubmission});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.every.js");const isSuccessfulBlastSubmission=submission=>!!submission&&"results"in submission,isFailedBlastSubmission=submission=>!!submission&&"error"in submission},"./src/content/app/tools/vep/services/vepStorageService.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{HP:()=>deleteVepSubmission,IL:()=>getVepSubmissionWithoutInputFile,Nr:()=>updateVepSubmission,P4:()=>getVepSubmissions,Y_:()=>getVepSubmission,fY:()=>saveVepSubmission,n0:()=>deleteExpiredVepSubmissions,xK:()=>changeVepSubmissionId});var src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/services/indexeddb-service.ts"),_vepStorageServiceConstants__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/content/app/tools/vep/services/vepStorageServiceConstants.ts");const saveVepSubmission=async submission=>{const submissionId=submission.id;await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.set(_vepStorageServiceConstants__WEBPACK_IMPORTED_MODULE_1__.IO,submissionId,submission)},getVepSubmission=async submissionId=>await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.get(_vepStorageServiceConstants__WEBPACK_IMPORTED_MODULE_1__.IO,submissionId),getVepSubmissionWithoutInputFile=async submissionId=>{const storedSubmission=await getVepSubmission(submissionId);if(storedSubmission)return removeInputFileFromSubmission(storedSubmission)},updateVepSubmission=async(submissionId,fragment)=>{const storedSubmission=await getVepSubmission(submissionId);if(!storedSubmission)return;if(storedSubmission.inputFile){const fileClone=await storedSubmission.inputFile.arrayBuffer();storedSubmission.inputFile=new File([fileClone],storedSubmission.inputFile.name)}const updatedSubmission={...storedSubmission,...fragment};await saveVepSubmission(updatedSubmission)},changeVepSubmissionId=async(oldId,newId,fragment={})=>{const transaction=(await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.getDB()).transaction(_vepStorageServiceConstants__WEBPACK_IMPORTED_MODULE_1__.IO,"readwrite"),store=transaction.store,updatedSubmission={...await store.get(oldId),id:newId,...fragment};await store.put(updatedSubmission,newId),await store.delete(oldId),await transaction.done},getVepSubmissions=async()=>{const db=await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.getDB();let cursor=await db.transaction(_vepStorageServiceConstants__WEBPACK_IMPORTED_MODULE_1__.IO).store.openCursor();const submissions=[];for(;cursor;){const storedSubmission=cursor.value;storedSubmission.submittedAt&&submissions.push(removeInputFileFromSubmission(storedSubmission)),cursor=await cursor.continue()}return submissions},deleteVepSubmission=async submissionId=>{await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.delete(_vepStorageServiceConstants__WEBPACK_IMPORTED_MODULE_1__.IO,submissionId)},deleteExpiredVepSubmissions=async()=>{const transaction=(await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_0__.A.getDB()).transaction(_vepStorageServiceConstants__WEBPACK_IMPORTED_MODULE_1__.IO,"readwrite");for await(const cursor of transaction.store){const submission=cursor.value,{submittedAt,createdAt}=submission,isOldTemporarySubmission=!submittedAt&&createdAt<Date.now()-_vepStorageServiceConstants__WEBPACK_IMPORTED_MODULE_1__.O,isExpiredSubmission=submittedAt&&submittedAt<Date.now()-_vepStorageServiceConstants__WEBPACK_IMPORTED_MODULE_1__.M1;(isOldTemporarySubmission||isExpiredSubmission)&&cursor.delete()}await transaction.done},removeInputFileFromSubmission=submission=>{const result={...submission},fileName=submission.inputFile?.name??null;return delete result.inputFile,{...result,inputFileName:fileName}}},"./src/content/app/tools/vep/services/vepStorageServiceConstants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{IO:()=>VEP_SUBMISSIONS_STORE_NAME,M1:()=>VEP_SUBMISSION_STORAGE_DURATION,O:()=>TEMPORARY_VEP_SUBMISSION_STORAGE_DURATION});var src_shared_constants_timeConstants__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/shared/constants/timeConstants.ts");const VEP_SUBMISSIONS_STORE_NAME="vep-submissions",VEP_SUBMISSION_STORAGE_DURATION=(src_shared_constants_timeConstants__WEBPACK_IMPORTED_MODULE_0__.$0,src_shared_constants_timeConstants__WEBPACK_IMPORTED_MODULE_0__.hN,28*src_shared_constants_timeConstants__WEBPACK_IMPORTED_MODULE_0__.$0),TEMPORARY_VEP_SUBMISSION_STORAGE_DURATION=src_shared_constants_timeConstants__WEBPACK_IMPORTED_MODULE_0__.$0},"./src/content/app/tools/vep/state/vep-api/vepApiSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o8:()=>vepFormSubmit});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.find.js");var esm=__webpack_require__("./node_modules/graphql-request/build/esm/index.js"),config=__webpack_require__("./config.ts");const variantDefaultQuery=esm.J1`
  query VariantDetails($genomeId: String!, $variantId: String!) {
    variant(by_id: { genome_id: $genomeId, variant_id: $variantId }) {
      name
      slice {
        region {
          name
        }
      }
      alleles {
        slice {
          location {
            start
          }
        }
        allele_sequence
        reference_sequence
      }
    }
  }
`;var restSlice=__webpack_require__("./src/shared/state/api-slices/restSlice.ts"),genomeApiSlice=__webpack_require__("./src/shared/state/genome/genomeApiSlice.ts");const vepApiSlice=restSlice.A.injectEndpoints({endpoints:builder=>({vepFormConfig:builder.query({query:params=>({url:`${config.A.toolsApiBaseUrl}/vep/form_config/${params.genome_id}`})}),vepFormExampleInput:builder.query({queryFn:async(params,{dispatch})=>{const{genomeId}=params,{data:exampleObjects}=await dispatch(genomeApiSlice.TV.initiate(genomeId,{subscribe:!1})),emptyResults={data:{}};if(!exampleObjects)return emptyResults;const exampleVariant=exampleObjects.find((item=>"variant"===item.type));if(!exampleVariant)return emptyResults;const{variant}=await(0,esm.Em)({url:config.A.variationApiUrl,document:variantDefaultQuery,variables:{genomeId,variantId:exampleVariant.id}});if(!variant)return emptyResults;const firstAltAllele=variant.alleles[0];return{data:{vcfString:`${variant.slice.region.name} ${firstAltAllele.slice.location.start} . ${firstAltAllele.reference_sequence} ${firstAltAllele.allele_sequence}`}}}}),vepFormSubmission:builder.mutation({query:payload=>({url:`${config.A.toolsApiBaseUrl}/vep/submissions`,method:"POST",body:prepareSubmissionFormData(payload)}),transformResponse:(response,_,params)=>({old_submission_id:params.submission_id,new_submission_id:response.submission_id}),transformErrorResponse:(response,meta,params)=>({submission_id:params.submission_id})}),vepResults:builder.query({query:({submission_id,page,per_page})=>({url:`${config.A.toolsApiBaseUrl}/vep/submissions/${submission_id}/results?page=${page}&per_page=${per_page}`})})})}),prepareSubmissionFormData=payload=>{const formData=new FormData;for(const[key,value]of Object.entries(payload))formData.append(key,value);return formData},{useVepFormConfigQuery,useVepFormExampleInputQuery,useVepResultsQuery,useVepFormSubmissionMutation}=vepApiSlice,{vepFormConfig:vepFormConfigQuery,vepFormSubmission:vepFormSubmit}=vepApiSlice.endpoints},"./src/content/app/tools/vep/state/vep-submissions/vepSubmissionsSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>__WEBPACK_DEFAULT_EXPORT__,Bo:()=>restoreVepSubmissions,Gk:()=>changeSubmissionId,gJ:()=>addSubmission,mQ:()=>updateSubmission,qB:()=>deleteSubmission});var _reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs"),src_content_app_tools_vep_services_vepStorageService__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/content/app/tools/vep/services/vepStorageService.ts");const restoreVepSubmissions=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.zD)("vep-submissions/restoreSubmissions",(async()=>{await(0,src_content_app_tools_vep_services_vepStorageService__WEBPACK_IMPORTED_MODULE_0__.n0)();const storedSubmissions=await(0,src_content_app_tools_vep_services_vepStorageService__WEBPACK_IMPORTED_MODULE_0__.P4)(),newState={};for(const submission of storedSubmissions)newState[submission.id]=submission;return newState})),updateSubmission=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.zD)("vep-submissions/updateSubmission",(async params=>{const{submissionId,fragment}=params;return await(0,src_content_app_tools_vep_services_vepStorageService__WEBPACK_IMPORTED_MODULE_0__.Nr)(submissionId,fragment),{submissionId,fragment}})),changeSubmissionId=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.zD)("vep-submissions/updateSubmissionId",(async params=>{const{oldId,newId,fragment}=params;return await(0,src_content_app_tools_vep_services_vepStorageService__WEBPACK_IMPORTED_MODULE_0__.xK)(oldId,newId,fragment),{oldId,newId,fragment}})),deleteSubmission=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.zD)("vep-submissions/deleteSubmission",(async params=>{const{submissionId}=params;return await(0,src_content_app_tools_vep_services_vepStorageService__WEBPACK_IMPORTED_MODULE_0__.HP)(submissionId),params})),vepSubmissionsSlice=(0,_reduxjs_toolkit__WEBPACK_IMPORTED_MODULE_1__.Z0)({name:"vep-submissions",initialState:{areSubmissionsRestored:!1,submissions:{}},reducers:{addSubmission:(state,action)=>{const submission=action.payload;state.submissions[submission.id]=submission}},extraReducers:builder=>{builder.addCase(restoreVepSubmissions.fulfilled,((state,action)=>{state.areSubmissionsRestored=!0,state.submissions=action.payload})),builder.addCase(updateSubmission.fulfilled,((state,action)=>{const{submissionId,fragment}=action.payload,submission=state.submissions[submissionId];if(submission){const updatedSubmission={...submission,...fragment};state.submissions[submissionId]=updatedSubmission}})),builder.addCase(changeSubmissionId.fulfilled,((state,action)=>{const{oldId,newId,fragment}=action.payload,submission=state.submissions[oldId];submission&&(state.submissions[newId]={...submission,...fragment,id:newId},delete state.submissions[oldId])})),builder.addCase(deleteSubmission.fulfilled,((state,action)=>{const{submissionId}=action.payload;delete state.submissions[submissionId]}))}}),{addSubmission}=vepSubmissionsSlice.actions,__WEBPACK_DEFAULT_EXPORT__=vepSubmissionsSlice.reducer},"./src/global/globalConfig.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{eV:()=>BreakpointWidth});let BreakpointWidth=function(BreakpointWidth){return BreakpointWidth[BreakpointWidth.PHONE=0]="PHONE",BreakpointWidth[BreakpointWidth.TABLET=600]="TABLET",BreakpointWidth[BreakpointWidth.LAPTOP=900]="LAPTOP",BreakpointWidth[BreakpointWidth.DESKTOP=1200]="DESKTOP",BreakpointWidth[BreakpointWidth.BIG_DESKTOP=1800]="BIG_DESKTOP",BreakpointWidth}({})},"./src/root/rootReducer.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>rootReducer});var redux=__webpack_require__("./node_modules/redux/dist/redux.mjs"),redux_toolkit_modern=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs");__webpack_require__("./src/content/app/genome-browser/state/browser-general/browserGeneralSelectors.ts");const defaultDrawerStateForGenome={drawerView:null},drawerSlice=(0,redux_toolkit_modern.Z0)({name:"genome-browser-drawer",initialState:{},reducers:{changeDrawerViewForGenome(state,action){const{genomeId,drawerView}=action.payload;((state,genomeId)=>{state[genomeId]||(state[genomeId]={...defaultDrawerStateForGenome})})(state,genomeId),state[genomeId].drawerView=drawerView}}}),{changeDrawerViewForGenome}=drawerSlice.actions,drawer_drawerSlice=drawerSlice.reducer,ensureGenomePresence=(state,genomeId)=>{state[genomeId]||(state[genomeId]={isVisible:!1,features:{}})},ensureFeaturePresence=(state,genomeId,featureId)=>{ensureGenomePresence(state,genomeId),state[genomeId].features[featureId]||(state[genomeId].features[featureId]={sequenceType:"genomic",isReverseComplement:!1})},drawerSequenceSlice=(0,redux_toolkit_modern.Z0)({name:"genome-browser-drawer-sequence",initialState:{},reducers:{showSequence(state,action){const{genomeId}=action.payload;ensureGenomePresence(state,genomeId),state[genomeId].isVisible=!0},hideSequence(state,action){const{genomeId}=action.payload;ensureGenomePresence(state,genomeId),state[genomeId].isVisible=!1},changeSequenceType(state,action){const{genomeId,featureId,sequenceType}=action.payload;ensureFeaturePresence(state,genomeId,featureId),state[genomeId].features[featureId].sequenceType=sequenceType},changeReverseComplement(state,action){const{genomeId,featureId,isReverseComplement}=action.payload;ensureFeaturePresence(state,genomeId,featureId),state[genomeId].features[featureId].isReverseComplement=isReverseComplement},clearGenome(state,action){const{genomeId}=action.payload;delete state[genomeId]}},extraReducers:builder=>{builder.addCase(changeDrawerViewForGenome,((state,action)=>{const{genomeId,drawerView}=action.payload;drawerView||delete state[genomeId]}))}}),{showSequence,hideSequence,changeSequenceType,changeReverseComplement,clearGenome}=drawerSequenceSlice.actions,drawer_sequence_drawerSequenceSlice=drawerSequenceSlice.reducer,drawerReducer=(0,redux.HY)({general:drawer_drawerSlice,sequence:drawer_sequence_drawerSequenceSlice});var browserGeneralSlice=__webpack_require__("./src/content/app/genome-browser/state/browser-general/browserGeneralSlice.ts"),trackSettingsSlice=__webpack_require__("./src/content/app/genome-browser/state/track-settings/trackSettingsSlice.ts"),trackPanelSlice=__webpack_require__("./src/content/app/genome-browser/state/track-panel/trackPanelSlice.ts"),browserSidebarModalSlice=__webpack_require__("./src/content/app/genome-browser/state/browser-sidebar-modal/browserSidebarModalSlice.ts"),browserBookmarksSlice=__webpack_require__("./src/content/app/genome-browser/state/browser-bookmarks/browserBookmarksSlice.ts"),focusObjectSlice=__webpack_require__("./src/content/app/genome-browser/state/focus-object/focusObjectSlice.ts");const displayedTracksSlice=(0,redux_toolkit_modern.Z0)({name:"genome-browser-displayed-tracks",initialState:[],reducers:{setDisplayedTracks:(state,action)=>action.payload}}),{setDisplayedTracks}=displayedTracksSlice.actions,displayed_tracks_displayedTracksSlice=displayedTracksSlice.reducer,genomeBrowserReducer=(0,redux.HY)({drawer:drawerReducer,browserGeneral:browserGeneralSlice.Ay,trackSettings:trackSettingsSlice.Ay,trackPanel:trackPanelSlice.Ay,browserSidebarModal:browserSidebarModalSlice.Ay,browserBookmarks:browserBookmarksSlice.Ay,focusObjects:focusObjectSlice.Ay,displayedTracks:displayed_tracks_displayedTracksSlice});var genomeApiSlice=__webpack_require__("./src/shared/state/genome/genomeApiSlice.ts");const genomeSlice=(0,redux_toolkit_modern.Z0)({name:"genomeInfo",initialState:{genomeTagToGenomeIdMap:{},genomes:{}},reducers:{},extraReducers:builder=>{builder.addMatcher(genomeApiSlice.uZ.matchFulfilled,((state,{payload})=>{const{genome_id,genome_tag}=payload;state.genomes[genome_id]=payload,genome_tag?state.genomeTagToGenomeIdMap[genome_tag]=genome_id:state.genomeTagToGenomeIdMap[genome_id]=genome_id}))}}),genome_genomeSlice=genomeSlice.reducer;const browser_tab_id_service=class BrowserTabIdService{static#browserTabId=null;static getBrowserTabId=()=>this.#browserTabId?this.#browserTabId:this.#readOrCreateBrowserTabId();static#readOrCreateBrowserTabId=()=>{let browserTabId=window.sessionStorage.getItem("browser-tab-id");return browserTabId?window.sessionStorage.removeItem("browser-tab-id"):browserTabId=(0,redux_toolkit_modern.Ak)(),this.#browserTabId=browserTabId,this.#setListener(),browserTabId};static#setListener=()=>{window.addEventListener("beforeunload",this.#onPageUnload)};static#onPageUnload=()=>{this.#browserTabId&&window.sessionStorage.setItem("browser-tab-id",this.#browserTabId)}};const defaultState={browserTabId:null,breakpointWidth:__webpack_require__("./src/global/globalConfig.ts").eV.DESKTOP,scrollPosition:{},currentApp:""},setBrowserTabId=(0,redux_toolkit_modern.zD)("global/set-browser-tab-id",(()=>({browserTabId:browser_tab_id_service.getBrowserTabId()}))),globalSlice=(0,redux_toolkit_modern.Z0)({name:"global",initialState:defaultState,reducers:{setBreakpointWidth(state,action){state.breakpointWidth=action.payload},saveScrollPosition(state,action){state.scrollPosition={...state.scrollPosition,...action.payload}},changeCurrentApp(state,action){state.currentApp=action.payload}},extraReducers:builder=>{builder.addCase(setBrowserTabId.fulfilled,((state,action)=>{state.browserTabId=action.payload.browserTabId}))}}),{setBreakpointWidth,saveScrollPosition,changeCurrentApp}=globalSlice.actions,global_globalSlice=globalSlice.reducer,pageMetaSlice=(0,redux_toolkit_modern.Z0)({name:"page-meta",initialState:{title:"Ensembl",description:"The new Ensembl website"},reducers:{updatePageMeta:(_,action)=>action.payload}}),{updatePageMeta}=pageMetaSlice.actions,page_meta_pageMetaSlice=pageMetaSlice.reducer,search=(0,redux_toolkit_modern.zD)("in-app-search/search",(async params=>{const queryParams={genome_ids:[params.genome_id],query:params.query,page:params.page,per_page:params.per_page},response=await fetch("/api/search/genes",{headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify(queryParams)}).then((response=>{if(!response.ok)throw new Error;return response.json()}));return{app:params.app,genome_id:params.genome_id,result:response}})),inAppSearchSlice=(0,redux_toolkit_modern.Z0)({name:"in-app-search",initialState:{speciesHome:{},genomeBrowser:{},entityViewer:{}},reducers:{updateQuery(state,action){const{payload:{app,genomeId,query}}=action;state[app][genomeId]||(state[app][genomeId]={query:"",result:null}),state[app][genomeId].query=query},clearSearch(state,action){const{payload}=action;delete state[payload.app][payload.genomeId]}},extraReducers:builder=>{builder.addCase(search.fulfilled,((state,action)=>{const{payload:{app,genome_id,result}}=action;state[app][genome_id]||(state[app][genome_id]={query:"",result:null}),state[app][genome_id].result=result}))}}),{updateQuery,clearSearch}=inAppSearchSlice.actions,in_app_search_inAppSearchSlice=inAppSearchSlice.reducer,communicationSlice=(0,redux_toolkit_modern.Z0)({name:"communication",initialState:{isCommunicationPanelOpen:!1},reducers:{openCommunicationPanel(state){state.isCommunicationPanelOpen=!0},toggleCommunicationPanel(state){state.isCommunicationPanelOpen=!state.isCommunicationPanelOpen}}}),{openCommunicationPanel,toggleCommunicationPanel}=communicationSlice.actions,communication_communicationSlice=communicationSlice.reducer;var speciesSelectorGeneralSlice=__webpack_require__("./src/content/app/species-selector/state/species-selector-general-slice/speciesSelectorGeneralSlice.ts");const speciesSelectorGeneSearchSlice=(0,redux_toolkit_modern.Z0)({name:"species-selector-gene-search",initialState:{query:""},reducers:{setQuery:(state,action)=>{state.query=action.payload}},selectors:{getQuery:state=>state.query}}),{setQuery}=speciesSelectorGeneSearchSlice.actions,species_selector_gene_search_slice_speciesSelectorGeneSearchSlice=speciesSelectorGeneSearchSlice.reducer,speciesSelectorReducer=(0,redux.HY)({general:speciesSelectorGeneralSlice.Ay,geneSearch:species_selector_gene_search_slice_speciesSelectorGeneSearchSlice});var entityViewerGeneralSlice=__webpack_require__("./src/content/app/entity-viewer/state/general/entityViewerGeneralSlice.ts"),merge=__webpack_require__("./node_modules/lodash/merge.js"),merge_default=__webpack_require__.n(merge),mergeWith=__webpack_require__("./node_modules/lodash/mergeWith.js"),mergeWith_default=__webpack_require__.n(mergeWith),types_status=__webpack_require__("./src/shared/types/status.ts");let SidebarTabName=function(SidebarTabName){return SidebarTabName.OVERVIEW="Overview",SidebarTabName.EXTERNAL_REFERENCES="External references",SidebarTabName}({});const buildInitialStateForGenome=genomeId=>({[genomeId]:{status:types_status.n.OPEN,selectedTabName:SidebarTabName.OVERVIEW,entities:{},sidebarModalView:null}}),entityViewerSidebarSlice=(0,redux_toolkit_modern.Z0)({name:"entity-viewer-sidebar",initialState:{},reducers:{initializeSidebar(state,action){const genomeId=action.payload;state[genomeId]||(state[genomeId]=buildInitialStateForGenome(genomeId)[genomeId])},updateGenomeState(state,action){const{genomeId,fragment:newFragment}=action.payload,oldStateFragment=state[genomeId]||buildInitialStateForGenome(genomeId)[genomeId],updatedFragment=merge_default()({},oldStateFragment,newFragment);state[genomeId]=updatedFragment},updateEntityUIState(state,action){const{genomeId,entityId,fragment:newFragment}=action.payload;if(!state[genomeId])return;mergeWith_default()(state[genomeId].entities[entityId].uiState,newFragment,((objValue,srcValue)=>{if(Array.isArray(objValue))return srcValue}))}}}),{initializeSidebar,updateGenomeState,updateEntityUIState}=entityViewerSidebarSlice.actions,sidebar_entityViewerSidebarSlice=entityViewerSidebarSlice.reducer;let View=function(View){return View.TRANSCRIPTS="transcripts",View.PROTEIN="protein",View.VARIANTS="variants",View.PHENOTYPES="phenotypes",View.GENE_EXPRESSION="gene_expression",View.GENE_ONTOLOGY="gene_ontology",View.GENE_PATHWAYS="gene_pathways",View.HOMOLOGY="homology",View.GENE_TREES="gene_trees",View.GENE_FAMILIES="gene_families",View.GENE_PANELS="gene_panels",View}({}),GeneViewTabName=function(GeneViewTabName){return GeneViewTabName.TRANSCRIPTS="Transcripts",GeneViewTabName.GENE_FUNCTION="Gene function",GeneViewTabName.GENE_RELATIONSHIPS="Gene relationships",GeneViewTabName}({}),GeneFunctionTabName=function(GeneFunctionTabName){return GeneFunctionTabName.PROTEINS="Proteins",GeneFunctionTabName.VARIANTS="Variants",GeneFunctionTabName.PHENOTYPES="Phenotypes",GeneFunctionTabName.GENE_EXPRESSION="Gene expression",GeneFunctionTabName.GENE_ONTOLOGY="Gene ontology",GeneFunctionTabName.GENE_PATHWAYS="Gene pathways",GeneFunctionTabName}({}),GeneRelationshipsTabName=function(GeneRelationshipsTabName){return GeneRelationshipsTabName.HOMOLOGY="Homology",GeneRelationshipsTabName.GENE_TREES="Gene trees",GeneRelationshipsTabName.GENE_FAMILIES="Gene families",GeneRelationshipsTabName.GENE_PANELS="Gene panels",GeneRelationshipsTabName}({});const GeneViewTabMap=new Map;GeneViewTabMap.set(View.TRANSCRIPTS,{view:View.TRANSCRIPTS,primaryTab:GeneViewTabName.TRANSCRIPTS,secondaryTab:null}),GeneViewTabMap.set(View.PROTEIN,{view:View.PROTEIN,primaryTab:GeneViewTabName.GENE_FUNCTION,secondaryTab:GeneFunctionTabName.PROTEINS}),GeneViewTabMap.set(View.VARIANTS,{view:View.VARIANTS,primaryTab:GeneViewTabName.GENE_FUNCTION,secondaryTab:GeneFunctionTabName.VARIANTS}),GeneViewTabMap.set(View.PHENOTYPES,{view:View.PHENOTYPES,primaryTab:GeneViewTabName.GENE_FUNCTION,secondaryTab:GeneFunctionTabName.PHENOTYPES}),GeneViewTabMap.set(View.GENE_EXPRESSION,{view:View.GENE_EXPRESSION,primaryTab:GeneViewTabName.GENE_FUNCTION,secondaryTab:GeneFunctionTabName.GENE_EXPRESSION}),GeneViewTabMap.set(View.GENE_ONTOLOGY,{view:View.GENE_ONTOLOGY,primaryTab:GeneViewTabName.GENE_FUNCTION,secondaryTab:GeneFunctionTabName.GENE_ONTOLOGY}),GeneViewTabMap.set(View.GENE_PATHWAYS,{view:View.GENE_PATHWAYS,primaryTab:GeneViewTabName.GENE_FUNCTION,secondaryTab:GeneFunctionTabName.GENE_PATHWAYS}),GeneViewTabMap.set(View.HOMOLOGY,{view:View.HOMOLOGY,primaryTab:GeneViewTabName.GENE_RELATIONSHIPS,secondaryTab:GeneRelationshipsTabName.HOMOLOGY}),GeneViewTabMap.set(View.GENE_FAMILIES,{view:View.GENE_FAMILIES,primaryTab:GeneViewTabName.GENE_RELATIONSHIPS,secondaryTab:GeneRelationshipsTabName.GENE_FAMILIES}),GeneViewTabMap.set(View.GENE_PANELS,{view:View.GENE_PANELS,primaryTab:GeneViewTabName.GENE_RELATIONSHIPS,secondaryTab:GeneRelationshipsTabName.GENE_PANELS});const initialStatePerGene={current:View.TRANSCRIPTS,selectedTabViews:{geneFunctionTab:null,geneRelationshipsTab:null}},viewSlice=(0,redux_toolkit_modern.Z0)({name:"entity-viewer-gene-view-view",initialState:{},reducers:{setView(state,action){const{activeGenomeId,activeObjectId,fragment}=action.payload;state[activeGenomeId]||(state[activeGenomeId]={[activeObjectId]:initialStatePerGene}),state[activeGenomeId][activeObjectId]={...state[activeGenomeId][activeObjectId],...fragment}}}}),geneViewViewSlice=viewSlice.reducer;__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.set.difference.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.intersection.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.is-disjoint-from.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.is-subset-of.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.is-superset-of.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.symmetric-difference.v2.js"),__webpack_require__("./node_modules/core-js/modules/es.set.union.v2.js");var cloneDeep=__webpack_require__("./node_modules/lodash/cloneDeep.js"),cloneDeep_default=__webpack_require__.n(cloneDeep),entity_viewer_storage_service=__webpack_require__("./src/content/app/entity-viewer/services/entity-viewer-storage-service.ts"),reselect=__webpack_require__("./node_modules/reselect/dist/reselect.mjs");const entityViewerGeneralSelectors_getEntityViewerActiveGenomeId=state=>state.entityViewer.general.activeGenomeId,getSliceForGene=(0,reselect.Mz)([entityViewerGeneralSelectors_getEntityViewerActiveGenomeId,state=>{const activeEntityIds=(state=>state.entityViewer.general.activeEntityIds)(state),activeGenomeId=entityViewerGeneralSelectors_getEntityViewerActiveGenomeId(state);return activeGenomeId?activeEntityIds[activeGenomeId]:null},state=>state],((genomeId,entityId,state)=>{if(genomeId&&entityId)return state.entityViewer.geneView.transcripts[genomeId]?.[entityId]}));(0,reselect.Mz)([getSliceForGene],(transcriptsSlice=>transcriptsSlice?.filters??{}));const defaultStatePerGene={expandedIds:[],isExpandedTranscriptsListModified:!1,expandedDownloadIds:[],expandedMoreInfoIds:[],filters:{},sortingRule:function(SortingRule){return SortingRule.DEFAULT="default",SortingRule.SPLICED_LENGTH_DESC="spliced_length_desc",SortingRule.SPLICED_LENGTH_ASC="spliced_length_asc",SortingRule.EXON_COUNT_DESC="exon_count_desc",SortingRule.EXON_COUNT_ASC="exon_count_asc",SortingRule}({}).DEFAULT,filterPanelOpen:!1},ensureGenePresence=(state,ids)=>{const{activeGenomeId,activeEntityId}=ids,clonedDefaultStatePerGene=cloneDeep_default()(defaultStatePerGene);state[activeGenomeId]?state[activeGenomeId][activeEntityId]||(state[activeGenomeId][activeEntityId]=clonedDefaultStatePerGene):state[activeGenomeId]={[activeEntityId]:clonedDefaultStatePerGene}},restoreGeneViewTranscripts=(0,redux_toolkit_modern.zD)("entity-viewer/restore-gene-view-transcripts",(()=>entity_viewer_storage_service.Ay.getGeneViewTranscriptsState()||{})),transcriptsSlice=(0,redux_toolkit_modern.Z0)({name:"entity-viewer-gene-view-transcripts",initialState:{},reducers:{updateExpandedTranscripts(state,action){const{activeGenomeId,activeEntityId,expandedIds}=action.payload;ensureGenePresence(state,action.payload),state[activeGenomeId][activeEntityId].expandedIds=expandedIds,state[activeGenomeId][activeEntityId].isExpandedTranscriptsListModified=!0},updateExpandedDownload(state,action){const{activeGenomeId,activeEntityId,expandedIds}=action.payload;ensureGenePresence(state,action.payload),state[activeGenomeId][activeEntityId].expandedDownloadIds=expandedIds},updateExpandedMoreInfo(state,action){const{activeGenomeId,activeEntityId,expandedIds}=action.payload;ensureGenePresence(state,action.payload),state[activeGenomeId][activeEntityId].expandedMoreInfoIds=expandedIds},updateFilterPanel(state,action){const{activeGenomeId,activeEntityId,filterPanelOpen}=action.payload;ensureGenePresence(state,action.payload),state[activeGenomeId][activeEntityId].filterPanelOpen=filterPanelOpen},updateFilters(state,action){const{activeGenomeId,activeEntityId,filters}=action.payload;ensureGenePresence(state,action.payload),state[activeGenomeId][activeEntityId].filters=filters},updateSortingRule(state,action){const{activeGenomeId,activeEntityId,sortingRule}=action.payload;ensureGenePresence(state,action.payload),state[activeGenomeId][activeEntityId].sortingRule=sortingRule}},extraReducers:builder=>{builder.addCase(restoreGeneViewTranscripts.fulfilled,((state,action)=>{const storedData=action.payload;Object.keys(storedData).forEach((genomeId=>{const entitiesPerGenome=storedData[genomeId];Object.keys(entitiesPerGenome).forEach((entityId=>{ensureGenePresence(state,{activeGenomeId:genomeId,activeEntityId:entityId}),state[genomeId][entityId]={...state[genomeId][entityId],...storedData[genomeId][entityId]}}))}))}))}}),{updateExpandedTranscripts}=transcriptsSlice.actions,geneViewTranscriptsSlice=transcriptsSlice.reducer,entityViewerGeneViewReducer=(0,redux.HY)({view:geneViewViewSlice,transcripts:geneViewTranscriptsSlice});var entityViewerBookmarksSlice=__webpack_require__("./src/content/app/entity-viewer/state/bookmarks/entityViewerBookmarksSlice.ts");const ensurePresenceOfVariantState=(state,genomeId,variantId)=>{state[genomeId]||(state[genomeId]={}),state[genomeId][variantId]||(state[genomeId][variantId]={view:"default",alleleId:null,expandTranscriptIds:[]})},variantViewGeneralSlice=(0,redux_toolkit_modern.Z0)({name:"entity-viewer-variant-view-view",initialState:{},reducers:{setView(state,action){const{genomeId,variantId,view}=action.payload;ensurePresenceOfVariantState(state,genomeId,variantId),state[genomeId][variantId].view=view},setAllele(state,action){const{genomeId,variantId,alleleId}=action.payload;ensurePresenceOfVariantState(state,genomeId,variantId),state[genomeId][variantId].alleleId=alleleId}}}),{setView,setAllele}=variantViewGeneralSlice.actions,general_variantViewGeneralSlice=variantViewGeneralSlice.reducer;__webpack_require__("./node_modules/core-js/modules/es.iterator.filter.js");const ensurePresenceOfTranscriptConsequenceState=(state,genomeId,variantId,alleleId)=>{state[genomeId]||(state[genomeId]={}),state[genomeId][variantId]||(state[genomeId][variantId]={}),state[genomeId][variantId][alleleId]||(state[genomeId][variantId][alleleId]={expandedIds:null})},transcriptConsequenceSlice=(0,redux_toolkit_modern.Z0)({name:"transcript-consequence-slice",initialState:{},reducers:{expandTranscript(state,action){const{genomeId,variantId,alleleId,transcriptId}=action.payload;ensurePresenceOfTranscriptConsequenceState(state,genomeId,variantId,alleleId);const expandedIds=state[genomeId][variantId][alleleId].expandedIds;if(expandedIds){const uniqueIds=new Set(expandedIds);uniqueIds.add(transcriptId),state[genomeId][variantId][alleleId].expandedIds=[...uniqueIds]}else state[genomeId][variantId][alleleId].expandedIds=[transcriptId]},collapseTranscript(state,action){const{genomeId,variantId,alleleId,transcriptId}=action.payload;ensurePresenceOfTranscriptConsequenceState(state,genomeId,variantId,alleleId);let expandedIds=state[genomeId][variantId][alleleId].expandedIds;expandedIds&&(expandedIds=expandedIds.filter((id=>id!==transcriptId)),state[genomeId][variantId][alleleId].expandedIds=expandedIds)}}}),{expandTranscript,collapseTranscript}=transcriptConsequenceSlice.actions,variant_view_transcriptConsequenceSlice=transcriptConsequenceSlice.reducer,entityViewerVariantViewReducer=(0,redux.HY)({general:general_variantViewGeneralSlice,transcriptConsequences:variant_view_transcriptConsequenceSlice}),entityViewerReducer=(0,redux.HY)({general:entityViewerGeneralSlice.Ay,sidebar:sidebar_entityViewerSidebarSlice,geneView:entityViewerGeneViewReducer,variantView:entityViewerVariantViewReducer,bookmarks:entityViewerBookmarksSlice.Ay});var speciesSelectorGeneralSelectors=__webpack_require__("./src/content/app/species-selector/state/species-selector-general-slice/speciesSelectorGeneralSelectors.ts");(0,redux_toolkit_modern.zD)("regulatory-activity-viewer-general/set-default-active-genome-id",((_,{getState,dispatch})=>{const state=getState(),[firstCommittedSpecies]=(0,speciesSelectorGeneralSelectors.VF)(state);firstCommittedSpecies&&dispatch(setActiveGenomeId(firstCommittedSpecies.genome_id))}));const generalSlice=(0,redux_toolkit_modern.Z0)({name:"regulatory-activity-viewer-general",initialState:{activeGenomeId:null},reducers:{setActiveGenomeId(state,action){state.activeGenomeId=action.payload}}}),{setActiveGenomeId}=generalSlice.actions,general_generalSlice=generalSlice.reducer;__webpack_require__("./node_modules/core-js/modules/web.dom-exception.stack.js"),__webpack_require__("./node_modules/core-js/modules/web.structured-clone.js");const initialStateForGenome={mainContentBottomView:"epigenomes-list",sidebarView:"default"},ensureStateForGenome=(state,genomeId)=>{genomeId in state||(state[genomeId]=structuredClone(initialStateForGenome))},uiSlice=(0,redux_toolkit_modern.Z0)({name:"regulatory-activity-viewer-ui",initialState:{},reducers:{setMainContentBottomView(state,action){const{genomeId,view}=action.payload;ensureStateForGenome(state,genomeId),state[genomeId].mainContentBottomView=view},setSidebarView(state,action){const{genomeId,view}=action.payload;ensureStateForGenome(state,genomeId),state[genomeId].sidebarView=view}}}),{setMainContentBottomView,setSidebarView}=uiSlice.actions,ui_uiSlice=uiSlice.reducer,initialStatePerGenome={selectedLocation:null},regionDetailSlice=(0,redux_toolkit_modern.Z0)({name:"regulatory-activity-viewer-region-in-detail",initialState:{},reducers:{setRegionDetailLocation(state,action){const{genomeId,location}=action.payload;((state,genomeId)=>{state[genomeId]||(state[genomeId]=structuredClone(initialStatePerGenome))})(state,genomeId),state[genomeId].selectedLocation=location}}}),{setRegionDetailLocation}=regionDetailSlice.actions,region_detail_regionDetailSlice=regionDetailSlice.reducer,epigenomeSelectionSlice_initialStateForGenome={selectionCriteria:{},combiningDimensions:[],sortingDimensions:null},epigenomeSelectionSlice_ensureStateForGenome=(state,genomeId)=>{genomeId in state||(state[genomeId]=structuredClone(epigenomeSelectionSlice_initialStateForGenome))},epigenomeSelectionSlice=(0,redux_toolkit_modern.Z0)({name:"regulatory-activity-viewer-epigenome-selection",initialState:{},reducers:{addSelectionCriterion(state,action){const{dimensionName,value,genomeId}=action.payload;epigenomeSelectionSlice_ensureStateForGenome(state,genomeId),state[genomeId].selectionCriteria[dimensionName]||(state[genomeId].selectionCriteria[dimensionName]=[]),state[genomeId].selectionCriteria[dimensionName].push(value)},removeSelectionCriterion(state,action){const{dimensionName,value,genomeId}=action.payload;epigenomeSelectionSlice_ensureStateForGenome(state,genomeId),state[genomeId].selectionCriteria[dimensionName]=state[genomeId].selectionCriteria[dimensionName].filter((item=>item!==value))},setCombiningDimensions(state,action){const{dimensionNames,genomeId}=action.payload;epigenomeSelectionSlice_ensureStateForGenome(state,genomeId),state[genomeId].combiningDimensions=dimensionNames},addCombiningDimension(state,action){const{dimensionName,genomeId}=action.payload;epigenomeSelectionSlice_ensureStateForGenome(state,genomeId),state[genomeId].combiningDimensions.push(dimensionName)},removeAllCombiningDimensions(state,action){const{genomeId}=action.payload;epigenomeSelectionSlice_ensureStateForGenome(state,genomeId),state[genomeId].combiningDimensions=[]},setSortingDimensionsOrder(state,action){const{genomeId,dimensionNames}=action.payload;epigenomeSelectionSlice_ensureStateForGenome(state,genomeId),state[genomeId].sortingDimensions=dimensionNames}}}),{addSelectionCriterion,removeSelectionCriterion,addCombiningDimension,removeAllCombiningDimensions,setCombiningDimensions,setSortingDimensionsOrder}=epigenomeSelectionSlice.actions,epigenome_selection_epigenomeSelectionSlice=epigenomeSelectionSlice.reducer,regulatoryActivityViewerReducer=(0,redux.HY)({general:general_generalSlice,ui:ui_uiSlice,regionDetail:region_detail_regionDetailSlice,epigenomeSelection:epigenome_selection_epigenomeSelectionSlice});const speciesSidebarSlice_initialStateForGenome={isSidebarOpen:!0,sidebarModalView:null},updateStateForGenome=(state,genomeId,fragment={})=>{const updatedStateForGenome={...state[genomeId]??structuredClone(speciesSidebarSlice_initialStateForGenome),...fragment};state[genomeId]=updatedStateForGenome},speciesPageSidebarSlice=(0,redux_toolkit_modern.Z0)({name:"species-page-sidebar",initialState:{},reducers:{toggleSidebar(state,action){const{genomeId}=action.payload;updateStateForGenome(state,genomeId),state[action.payload.genomeId].isSidebarOpen=!state[action.payload.genomeId].isSidebarOpen},updateSpeciesSidebarModalForGenome(state,action){const{activeGenomeId,fragment}=action.payload;updateStateForGenome(state,activeGenomeId,fragment)}}}),{toggleSidebar:speciesSidebarSlice_toggleSidebar,updateSpeciesSidebarModalForGenome}=speciesPageSidebarSlice.actions,speciesSidebarSlice=speciesPageSidebarSlice.reducer;var fp_set=__webpack_require__("./node_modules/lodash/fp/set.js"),set_default=__webpack_require__.n(fp_set),storage_service=__webpack_require__("./src/services/storage-service.ts");let StorageKeys=function(StorageKeys){return StorageKeys.GENOME_UI_STATE="species.genomeUIState",StorageKeys}({});const options={storage:storage_service.eL.SESSION_STORAGE};const species_storage_service=new class SpeciesStorageService{constructor(storageService){this.storageService=storageService}getUIState(){return this.storageService.get(StorageKeys.GENOME_UI_STATE,options)||{}}updateUIState(uiState){this.storageService.update(StorageKeys.GENOME_UI_STATE,uiState,options)}}(storage_service.Ay),speciesGeneralSlice=(0,redux_toolkit_modern.Z0)({name:"species-page-general",initialState:{activeGenomeId:null,uiState:{}},reducers:{setActiveGenomeId(state,action){state.activeGenomeId=action.payload},setExpandedSections(state,action){const stateToUpdate=state.uiState[action.payload.genomeId]?state:set_default()(action.payload.genomeId,{expandedSections:[]},state);return set_default()(`uiState.${action.payload.genomeId}.expandedSections`,action.payload.expandedSections,stateToUpdate)},restoreUI(state){state.uiState=species_storage_service.getUIState()}}}),{setActiveGenomeId:speciesGeneralSlice_setActiveGenomeId,setExpandedSections,restoreUI}=speciesGeneralSlice.actions,general_speciesGeneralSlice=speciesGeneralSlice.reducer,state=(0,redux.HY)({general:general_speciesGeneralSlice,sidebar:speciesSidebarSlice});__webpack_require__("./node_modules/core-js/modules/es.iterator.find.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.reduce.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.some.js");var difference=__webpack_require__("./node_modules/lodash/difference.js"),difference_default=__webpack_require__.n(difference);const certainAminoAcids="ACDEFGHIKLMNPQRSTUVWY",ambiguousAminoAcids="XBZ",certainNucleotides="ACGTU",ambiguousNucleotides="BDHKMNRSVWY",aminoAcidOnlyCodes=([certainAminoAcids,ambiguousAminoAcids,"*","-"].join(""),[certainNucleotides,ambiguousNucleotides,"-"].join(""),difference_default()(`${certainAminoAcids}${ambiguousAminoAcids}`.split(""),`${certainNucleotides}${ambiguousNucleotides}`.split("")).join("")),aminoAcidOnlyRegex=new RegExp(`[${aminoAcidOnlyCodes}]`,"i"),certainNucleotidesSet=new Set(Array.from(certainNucleotides)),guessSequenceType=sequence=>{if(sequence=cleanUpSequence(sequence),hasUniqueAminoAcidCharacters(sequence))return"protein";return sequence.split("").reduce(((count,character)=>certainNucleotidesSet.has(character)?count+1:count),0)/sequence.length>=.9?"dna":"protein"},hasUniqueAminoAcidCharacters=sequence=>aminoAcidOnlyRegex.test(sequence),cleanUpSequence=sequence=>sequence.replace(/[^A-Z]|[NJ]/gi,""),initialBlastFormSettings={submissionName:"",sequenceType:"dna",sequenceSelectionMode:"automatic",databaseSelectionMode:"automatic",program:"blastn",preset:"normal",parameters:{}},blastFormSlice_initialState={step:"sequences",modalView:null,sequences:[],shouldAppendEmptyInput:!0,hasUncommittedSequence:!1,selectedSpecies:[],settings:initialBlastFormSettings},autoUpdateSettings=(state,config)=>{if(state.sequences.length&&"automatic"===state.settings.sequenceSelectionMode){const firstSequence=state.sequences[0].value,sequenceType=guessSequenceType(firstSequence);state.settings.sequenceType=sequenceType}"automatic"===state.settings.databaseSelectionMode&&updateDatabaseFromSequenceType(state,config);const sequenceType=state.settings.sequenceType,database=state.settings.parameters.database,databaseSequenceType=(({database,config})=>config.database_sequence_types[database])({database,config}),programName=(({sequenceType,databaseSequenceType,config})=>{const programs=config.programs_configurator.find((({sequence_type,database_type})=>sequence_type===sequenceType&&database_type===databaseSequenceType))?.programs;return programs[0]})({sequenceType,databaseSequenceType,config}),presetName=initialBlastFormSettings.preset,parameters=config.presets.settings[programName][presetName];state.settings.program=programName,state.settings.preset=presetName,state.settings.parameters={...parameters,database}},resetSettings=(state,config)=>{state.settings=cloneDeep_default()(initialBlastFormSettings),state.settings.parameters.database=config.defaults.database},updateDatabaseFromSequenceType=(state,config)=>{const currentDatabase=state.settings.parameters.database,currentSequenceType=state.settings.sequenceType,{database_sequence_types}=config;if(!currentDatabase||database_sequence_types[currentDatabase]!==currentSequenceType){const match=Object.entries(config.database_sequence_types).find((([,dbSequenceType])=>dbSequenceType===currentSequenceType)),[databaseName]=match;state.settings.parameters.database=databaseName}},blastFormSlice=(0,redux_toolkit_modern.Z0)({name:"blast-form",initialState:blastFormSlice_initialState,reducers:{setSequences(state,action){const{sequences,config}=action.payload;((state,sequences)=>{sequences.length>state.sequences.length?state.shouldAppendEmptyInput=!1:sequences.length||(state.shouldAppendEmptyInput=!0)})(state,sequences),state.sequences=sequences,state.hasUncommittedSequence=!1,sequences.length?guessSequenceType(sequences[0].value)!==state.settings.sequenceType&&"automatic"===state.settings.sequenceSelectionMode&&autoUpdateSettings(state,config):(resetSettings(state,config),autoUpdateSettings(state,config))},addSelectedSpecies(state,action){let speciesList=[...state.selectedSpecies];Array.isArray(action.payload)?speciesList=speciesList.concat(action.payload):speciesList.push(action.payload);const sortedSpeciesList=sortAddedSpecies(speciesList);state.selectedSpecies=sortedSpeciesList},removeSelectedSpecies(state,action){const genomeId=action.payload;state.selectedSpecies=state.selectedSpecies.filter((species=>species.genome_id!==genomeId))},clearSelectedSpecies(state){state.selectedSpecies=[]},updateEmptyInputDisplay(state,action){state.shouldAppendEmptyInput=action.payload},setHasUncommittedSequence(state,action){state.hasUncommittedSequence=action.payload},switchToSequencesStep(state){state.step="sequences"},switchToSpeciesStep(state){state.step="species"},openSpeciesSearchModal(state){state.modalView="species-search"},closeSpeciesSearchModal(state){state.modalView=null},setSequenceType(state,action){const{sequenceType,config,isAutomatic}=action.payload;state.settings.sequenceType=sequenceType,isAutomatic||(state.settings.sequenceSelectionMode="manual"),autoUpdateSettings(state,config)},setBlastDatabase(state,action){const{database,config,isAutomatic}=action.payload;state.settings.parameters={...state.settings.parameters,database},isAutomatic||(state.settings.databaseSelectionMode="manual",state.settings.sequenceSelectionMode="manual"),autoUpdateSettings(state,config)},setBlastProgram(state,action){const{program,config}=action.payload,presetName=initialBlastFormSettings.preset,parameters=config.presets.settings[program][presetName];state.settings.program=program,state.settings.preset=presetName,state.settings.parameters={...parameters,database:state.settings.parameters.database}},changeSensitivityPresets(state,action){const{presetName,config}=action.payload,program=state.settings.program,parameters=config.presets.settings[program][presetName];state.settings.preset=presetName,state.settings.parameters={...parameters,database:state.settings.parameters.database}},setBlastParameter(state,action){const{parameterName,parameterValue,config}=action.payload;state.settings.parameters[parameterName]=parameterValue,"match_scores"!==parameterName&&"matrix"!==parameterName||(params=>{const{state,parameterName,parameterValue,config}=params,program=state.settings.program,preset=state.settings.preset;if(config.presets.settings[program][preset].gapopen&&parameterName in config.gap_penalties.options){let gapopen,gapext;config.gap_penalties.defaults?.[parameterName]?.[parameterValue]?[gapopen,gapext]=config.gap_penalties.defaults[parameterName][parameterValue]:[gapopen,gapext]=config.gap_penalties.options[parameterName][parameterValue][0],state.settings.parameters.gapopen=gapopen,state.settings.parameters.gapext=gapext}})({state,parameterName,parameterValue,config})},setBlastSubmissionName(state,action){state.settings.submissionName=action.payload},fillBlastForm(_,action){const{sequences,selectedSpecies,settings}=action.payload;return cloneDeep_default()({...blastFormSlice_initialState,sequences,selectedSpecies,shouldAppendEmptyInput:!1,settings:{...cloneDeep_default()(initialBlastFormSettings),...settings}})},setSequenceForGenome(state,action){const{sequence,species,sequenceType,config}=action.payload;resetSettings(state,config),state.sequences=[sequence],state.selectedSpecies=[species],state.shouldAppendEmptyInput=!1,state.settings.sequenceType=sequenceType,state.settings.sequenceSelectionMode="manual",autoUpdateSettings(state,config)},clearBlastForm:()=>cloneDeep_default()(blastFormSlice_initialState)}}),sortAddedSpecies=speciesList=>{const sortedList=[...speciesList];return sortedList.sort(((a,b)=>{const nameA=a.common_name??a.scientific_name,nameB=b.common_name??b.scientific_name;return nameA.toLowerCase().localeCompare(nameB.toLocaleLowerCase())})),sortedList},{setSequences,updateEmptyInputDisplay,setHasUncommittedSequence,switchToSpeciesStep,switchToSequencesStep,openSpeciesSearchModal,closeSpeciesSearchModal,addSelectedSpecies,removeSelectedSpecies,clearSelectedSpecies,setSequenceType,setBlastDatabase,setBlastProgram,changeSensitivityPresets,setBlastParameter,setBlastSubmissionName,fillBlastForm,setSequenceForGenome,clearBlastForm}=blastFormSlice.actions,blast_form_blastFormSlice=blastFormSlice.reducer;var blastResultsSlice=__webpack_require__("./src/content/app/tools/blast/state/blast-results/blastResultsSlice.ts");const blastGeneralSlice=(0,redux_toolkit_modern.Z0)({name:"blast-general",initialState:{view:"blast-form"},reducers:{setBlastView(state,action){state.view=action.payload}}}),{setBlastView}=blastGeneralSlice.actions,general_blastGeneralSlice=blastGeneralSlice.reducer,blastReducer=(0,redux.HY)({blastForm:blast_form_blastFormSlice,blastResults:blastResultsSlice.Ay,blastGeneral:general_blastGeneralSlice});var vepStorageService=__webpack_require__("./src/content/app/tools/vep/services/vepStorageService.ts");const getBrowserTabId=state=>state.global.browserTabId||"",getTemporaryVepSubmissionId=state=>state.vep.vepForm.submissionId;var vepSubmissionsSlice=__webpack_require__("./src/content/app/tools/vep/state/vep-submissions/vepSubmissionsSlice.ts"),vepApiSlice=__webpack_require__("./src/content/app/tools/vep/state/vep-api/vepApiSlice.ts");const vepFormSlice_initialState={submissionId:null,selectedSpecies:null,submissionName:null,inputText:"",inputFileName:null,isInputCommitted:!1,parameters:{}},createTemporarySubmissionId=tabId=>`temporary-${tabId}`,initialiseVepForm=(0,redux_toolkit_modern.zD)("vep-form/initialiseVepForm",(async(_,thunkApi)=>{const state=thunkApi.getState();if(getTemporaryVepSubmissionId(state))return;const browserTabId=getBrowserTabId(state),temporaryId=createTemporarySubmissionId(browserTabId),storedVepFormData=await(0,vepStorageService.IL)(temporaryId);if(storedVepFormData)return{submissionId:storedVepFormData.id};const initialSubmissionData={id:temporaryId,species:null,submissionName:null,inputText:null,inputFile:null,parameters:{},createdAt:Date.now(),submittedAt:null,status:"NOT_SUBMITTED",resultsSeen:!1};return await(0,vepStorageService.fY)(initialSubmissionData),{submissionId:temporaryId}})),updateInputFile=(0,redux_toolkit_modern.zD)("vep-form/updateInputFile",(async(file,thunkApi)=>{const state=thunkApi.getState(),temporaryVepSubmissionId=getTemporaryVepSubmissionId(state),storedSubmission=await(0,vepStorageService.Y_)(temporaryVepSubmissionId);if(!storedSubmission)return;const updatedSubmission={...storedSubmission,inputText:null,inputFile:file};return await(0,vepStorageService.Nr)(storedSubmission.id,updatedSubmission),{fileName:file.name}})),clearVariantsInput=(0,redux_toolkit_modern.zD)("vep-form/clearVariantsInput",(async(_,thunkApi)=>{const state=thunkApi.getState(),temporaryVepSubmissionId=getTemporaryVepSubmissionId(state),storedSubmission=await(0,vepStorageService.Y_)(temporaryVepSubmissionId);if(!storedSubmission)return;const updatedSubmission={...storedSubmission,inputText:null,inputFile:null};return await(0,vepStorageService.Nr)(storedSubmission.id,updatedSubmission),{inputText:null,fileName:null}})),fillVepFormWithExistingSubmissionData=(0,redux_toolkit_modern.zD)("vep-form/fillWithExistingSubmissionData",(async(params,thunkAPI)=>{const state=thunkAPI.getState(),storedSubmission=await(0,vepStorageService.Y_)(params.submissionId);if(!storedSubmission)return;const browserTabId=getBrowserTabId(state),newSubmissionId=createTemporarySubmissionId(browserTabId);storedSubmission.id=newSubmissionId,storedSubmission.createdAt=Date.now(),storedSubmission.submittedAt=null,storedSubmission.resultsSeen=!1,storedSubmission.status="NOT_SUBMITTED",await(0,vepStorageService.fY)(storedSubmission);return{submissionId:newSubmissionId,submissionName:storedSubmission.submissionName,selectedSpecies:storedSubmission.species,inputFileName:storedSubmission.inputFile?.name??null,inputText:storedSubmission.inputText,parameters:storedSubmission.parameters,isInputCommitted:!0}})),onVepFormSubmission=(0,redux_toolkit_modern.zD)("vep-form/onVepFormSubmission",(async(_,thunkApi)=>{const state=thunkApi.getState(),dispatch=thunkApi.dispatch,vepFormState=(state=>state.vep.vepForm)(state),submissionId=vepFormState.submissionId,species=vepFormState.selectedSpecies,inputText=vepFormState.inputText,parameters=vepFormState.parameters,updatedSubmissionId=`submitting-${(0,redux_toolkit_modern.Ak)()}`;await(0,vepStorageService.Nr)(submissionId,{id:submissionId,submissionName:vepFormState.submissionName,species,inputText,parameters,submittedAt:Date.now(),status:"SUBMITTING"}),await(0,vepStorageService.xK)(submissionId,updatedSubmissionId);const updatedStoredSubmission=await(0,vepStorageService.IL)(updatedSubmissionId);dispatch((0,vepSubmissionsSlice.gJ)(updatedStoredSubmission));const requestPayload=await prepareRequestPayload({submissionId:updatedSubmissionId,species,inputText,parameters});dispatch(vepApiSlice.o8.initiate(requestPayload,{track:!1}))})),prepareRequestPayload=async({submissionId,species,inputText,parameters})=>{let inputFile;if(inputText)inputFile=new File([inputText],"input.txt",{type:"text/plain"});else{const storedSubmission=await(0,vepStorageService.Y_)(submissionId);if(!storedSubmission)throw new Error(`Submission with id ${submissionId} does not exist in browser storage`);inputFile=storedSubmission.inputFile}return{submission_id:submissionId,genome_id:species.genome_id,input_file:inputFile,parameters:JSON.stringify(parameters)}},vepFormSlice=(0,redux_toolkit_modern.Z0)({name:"vep-form",initialState:vepFormSlice_initialState,reducers:{setSelectedSpecies:(state,action)=>{state.selectedSpecies=action.payload.species,state.parameters={}},setDefaultParameters:(state,action)=>{const defaultParameters={};for(const[parameterName,parameter]of Object.entries(action.payload.parameters))defaultParameters[parameterName]=parameter.default_value;state.parameters=defaultParameters},updateParameters:(state,action)=>{state.parameters={...state.parameters,...action.payload}},updateSubmissionName:(state,action)=>{state.submissionName=action.payload},updateInputText:(state,action)=>{state.inputText=action.payload},updateInputCommittedFlag:(state,action)=>{state.isInputCommitted=action.payload},resetForm:state=>({...vepFormSlice_initialState,submissionId:state.submissionId})},extraReducers:builder=>{builder.addCase(initialiseVepForm.fulfilled,((state,action)=>{action.payload&&(state.submissionId=action.payload.submissionId)})),builder.addCase(updateInputFile.fulfilled,((state,action)=>{action.payload&&(state.inputFileName=action.payload.fileName)})),builder.addCase(clearVariantsInput.fulfilled,(state=>{state.inputFileName=null,state.inputText=null})),builder.addCase(onVepFormSubmission.fulfilled,(()=>vepFormSlice_initialState)),builder.addCase(fillVepFormWithExistingSubmissionData.fulfilled,((_,action)=>action.payload))}}),{setSelectedSpecies,setDefaultParameters,updateParameters,updateSubmissionName,updateInputText,updateInputCommittedFlag,resetForm}=vepFormSlice.actions,vep_form_vepFormSlice=vepFormSlice.reducer,vepReducer=(0,redux.HY)({vepForm:vep_form_vepFormSlice,vepSubmissions:vepSubmissionsSlice.Ay});var graphqlApiSlice=__webpack_require__("./src/shared/state/api-slices/graphqlApiSlice.ts"),restSlice=__webpack_require__("./src/shared/state/api-slices/restSlice.ts");const rootReducer=()=>(0,redux.HY)({browser:genomeBrowserReducer,communication:communication_communicationSlice,pageMeta:page_meta_pageMetaSlice,inAppSearch:in_app_search_inAppSearchSlice,genome:genome_genomeSlice,global:global_globalSlice,speciesSelector:speciesSelectorReducer,speciesPage:state,entityViewer:entityViewerReducer,regionActivityViewer:regulatoryActivityViewerReducer,blast:blastReducer,vep:vepReducer,[graphqlApiSlice.A.reducerPath]:graphqlApiSlice.A.reducer,[restSlice.A.reducerPath]:restSlice.A.reducer})},"./src/server/constants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{JH:()=>hostWithProtocol});const hostWithProtocol="http://localhost:8080"},"./src/services/indexeddb-service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>indexeddb_service});var build=__webpack_require__("./node_modules/idb/build/index.js"),generalUIStorageConstants=__webpack_require__("./src/shared/services/generalUIStorageConstants.ts"),speciesSelectorStorageConstants=__webpack_require__("./src/content/app/species-selector/services/speciesSelectorStorageConstants.ts"),trackSettingsStorageConstants=__webpack_require__("./src/content/app/genome-browser/services/track-settings/trackSettingsStorageConstants.ts"),focusObjectStorageConstants=__webpack_require__("./src/content/app/genome-browser/services/focus-objects/focusObjectStorageConstants.ts"),blastStorageServiceConstants=__webpack_require__("./src/content/app/tools/blast/services/blastStorageServiceConstants.ts"),vepStorageServiceConstants=__webpack_require__("./src/content/app/tools/vep/services/vepStorageServiceConstants.ts"),previouslyViewedObjectsStorageConstants=__webpack_require__("./src/shared/services/previouslyViewedObjectsStorageConstants.ts");const indexeddb_service=class IndexedDB{static db=null;static async getDB(){var params;return this.db||(this.db=await(params={onBlocking:()=>{this.db&&(this.db.close(),this.db=null,window.location.reload())}},(0,build.P2)("ensembl-website",6,{upgrade(db){db.objectStoreNames.contains("contact-forms")||db.createObjectStore("contact-forms"),db.objectStoreNames.contains(generalUIStorageConstants.k)||db.createObjectStore(generalUIStorageConstants.k),db.objectStoreNames.contains(speciesSelectorStorageConstants.j)||db.createObjectStore(speciesSelectorStorageConstants.j),db.objectStoreNames.contains(blastStorageServiceConstants.Zu)||db.createObjectStore(blastStorageServiceConstants.Zu),db.objectStoreNames.contains(vepStorageServiceConstants.IO)||db.createObjectStore(vepStorageServiceConstants.IO),db.objectStoreNames.contains(previouslyViewedObjectsStorageConstants.$p)||db.createObjectStore(previouslyViewedObjectsStorageConstants.$p),db.objectStoreNames.contains("notifications")||db.createObjectStore("notifications"),db.objectStoreNames.contains(trackSettingsStorageConstants.Q)||db.createObjectStore(trackSettingsStorageConstants.Q,{keyPath:["genomeId","trackId"]}).createIndex("genomeId","genomeId",{unique:!1}),db.objectStoreNames.contains(focusObjectStorageConstants.A)||db.createObjectStore(focusObjectStorageConstants.A).createIndex("genomeId","genomeId",{unique:!1})},blocking(...args){params?.onBlocking?.(...args)}}))),this.db}static async get(store,key){return(await this.getDB()).get(store,key)}static async set(store,key,value){return(await this.getDB()).put(store,value,key)}static async delete(store,key){return(await this.getDB()).delete(store,key)}static async clear(store){return(await this.getDB()).clear(store)}static async keys(store){return(await this.getDB()).getAllKeys(store)}static async clearDatabase(){const db=await this.getDB(),objectStoreNames=db.objectStoreNames;for(const store of objectStoreNames)await db.clear(store)}}},"./src/services/storage-service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>__WEBPACK_DEFAULT_EXPORT__,eL:()=>StorageType});var src_services_window_service__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/services/window-service.ts"),lodash_mergeWith__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/lodash/mergeWith.js"),lodash_mergeWith__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(lodash_mergeWith__WEBPACK_IMPORTED_MODULE_1__),lodash_isArray__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/lodash/isArray.js"),lodash_isArray__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(lodash_isArray__WEBPACK_IMPORTED_MODULE_2__),lodash_unset__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/lodash/unset.js"),lodash_unset__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(lodash_unset__WEBPACK_IMPORTED_MODULE_3__);let StorageType=function(StorageType){return StorageType.LOCAL_STORAGE="localstorage",StorageType.SESSION_STORAGE="sessionstorage",StorageType}({});const defaultOptions={storage:StorageType.LOCAL_STORAGE},mergeStrategy=(currentValue,newValue,key,object)=>{if(void 0===newValue&&lodash_unset__WEBPACK_IMPORTED_MODULE_3___default()(object,key),Array.isArray(currentValue))return newValue};const __WEBPACK_DEFAULT_EXPORT__=new class StorageService{constructor(windowService){if("undefined"==typeof window)return this.localStorage={},void(this.sessionStorage={});this.localStorage=windowService.getLocalStorage(),this.sessionStorage=windowService.getSessionStorage()}chooseStorage(storage){return storage===StorageType.SESSION_STORAGE?this.sessionStorage:this.localStorage}get(key,options=defaultOptions){const savedValue=this.chooseStorage(options.storage).getItem(key);return savedValue?JSON.parse(savedValue):null}save(key,value,options=defaultOptions){this.chooseStorage(options.storage).setItem(key,JSON.stringify(value))}update(key,fragment,options=defaultOptions){const storedData=this.get(key,options);storedData?this.save(key,lodash_mergeWith__WEBPACK_IMPORTED_MODULE_1___default()(storedData,fragment,mergeStrategy),options):this.save(key,fragment,options)}remove(key,options=defaultOptions){this.chooseStorage(options.storage).removeItem(key)}removeAt(key,pathOrPaths,options=defaultOptions){const paths=lodash_isArray__WEBPACK_IMPORTED_MODULE_2___default()(pathOrPaths)?pathOrPaths:[pathOrPaths],storedData=this.get(key,options);lodash_unset__WEBPACK_IMPORTED_MODULE_3___default()(storedData,paths),this.save(key,storedData,options)}clearAll(){this.localStorage.clear(),this.sessionStorage.clear()}}(src_services_window_service__WEBPACK_IMPORTED_MODULE_0__.A)},"./src/services/window-service.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=new class WindowService{getWindow(){return window}getLocalStorage(){return window.localStorage}getSessionStorage(){return window.sessionStorage}getLocation(){return window.location}getFileReader(){return new FileReader}getResizeObserver(){return ResizeObserver}getMatchMedia(){return window.matchMedia}getDimensions(){const width=window.innerWidth,height=window.innerHeight;return{x:0,y:0,width,height,top:0,left:0,right:width,bottom:height}}}},"./src/shared/components/species-name/SpeciesName.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{_:()=>SpeciesName,A:()=>species_name_SpeciesName});var speciesSelectorEpics_namespaceObject={};__webpack_require__.r(speciesSelectorEpics_namespaceObject),__webpack_require__.d(speciesSelectorEpics_namespaceObject,{checkLoadedSpeciesEpic:()=>checkLoadedSpeciesEpic,ensureCommittedSpeciesEpic:()=>ensureCommittedSpeciesEpic});var blastEpics_namespaceObject={};__webpack_require__.r(blastEpics_namespaceObject),__webpack_require__.d(blastEpics_namespaceObject,{blastFailedSubmissionsEpic:()=>blastFailedSubmissionsEpic,blastFormSubmissionEpic:()=>blastFormSubmissionEpic,blastSubmissionsRestoreEpic:()=>blastSubmissionsRestoreEpic});var classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),redux_toolkit_modern=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs"),react_redux=__webpack_require__("./node_modules/react-redux/dist/react-redux.mjs"),redux_observable=__webpack_require__("./node_modules/redux-observable/dist/redux-observable.mjs"),config_0=__webpack_require__("./config.ts"),graphqlApiSlice=__webpack_require__("./src/shared/state/api-slices/graphqlApiSlice.ts"),restSlice=__webpack_require__("./src/shared/state/api-slices/restSlice.ts"),rootReducer=__webpack_require__("./src/root/rootReducer.ts"),filter=(__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.find.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.map.js"),__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/filter.js")),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js"),speciesSelectorStorageService=__webpack_require__("./src/content/app/species-selector/services/speciesSelectorStorageService.ts"),speciesSelectorGeneralSelectors=__webpack_require__("./src/content/app/species-selector/state/species-selector-general-slice/speciesSelectorGeneralSelectors.ts"),genomeSelectors=__webpack_require__("./src/shared/state/genome/genomeSelectors.ts"),speciesSelectorGeneralSlice=__webpack_require__("./src/content/app/species-selector/state/species-selector-general-slice/speciesSelectorGeneralSlice.ts"),genomeApiSlice=__webpack_require__("./src/shared/state/genome/genomeApiSlice.ts");const ensureCommittedSpeciesEpic=(action$,state$)=>action$.pipe((0,filter.p)(genomeApiSlice.uZ.matchFulfilled),(0,map.T)((action=>({action,state:state$.value}))),(0,filter.p)((({action,state})=>{const genomeId=action.payload.genome_id;return!(0,speciesSelectorGeneralSelectors.VV)(state,genomeId)})),(0,map.T)((({action,state})=>{const genomeInfo=action.payload,newSpecies=buildCommittedItemFromBriefGenomeSummary(genomeInfo);return[...(0,speciesSelectorGeneralSelectors.VF)(state),newSpecies]})),(0,tap.M)((allCommittedSpecies=>{(0,speciesSelectorStorageService.Fc)(allCommittedSpecies)})),(0,map.T)((allCommittedSpecies=>(0,speciesSelectorGeneralSlice.qs)(allCommittedSpecies)))),checkLoadedSpeciesEpic=(action$,state$)=>action$.pipe((0,filter.p)((0,redux_toolkit_modern.sf)(speciesSelectorGeneralSlice.aG)),(0,map.T)((action=>{const state=state$.value,allGenomes=Object.values((0,genomeSelectors.pB)(state)),committedSpecies=action.payload;return{action,state,uncommittedGenomes:allGenomes.filter((({genome_id})=>!committedSpecies.find((species=>species.genome_id===genome_id))))}})),(0,filter.p)((({uncommittedGenomes})=>uncommittedGenomes.length>0)),(0,map.T)((({state,uncommittedGenomes})=>{const newSpecies=uncommittedGenomes.map(buildCommittedItemFromBriefGenomeSummary);return[...(0,speciesSelectorGeneralSelectors.VF)(state),...newSpecies]})),(0,tap.M)((allCommittedSpecies=>{(0,speciesSelectorStorageService.Fc)(allCommittedSpecies)})),(0,map.T)((allCommittedSpecies=>(0,speciesSelectorGeneralSlice.qs)(allCommittedSpecies)))),buildCommittedItemFromBriefGenomeSummary=genome=>({genome_id:genome.genome_id,genome_tag:genome.genome_tag,common_name:genome.common_name,scientific_name:genome.scientific_name,species_taxonomy_id:genome.species_taxonomy_id,type:genome.type,is_reference:genome.is_reference,assembly:{accession_id:genome.assembly.accession_id,name:genome.assembly.name},isEnabled:!0});__webpack_require__("./node_modules/core-js/modules/es.iterator.flat-map.js");var take=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/take.js"),switchMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js"),never=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/never.js"),pipe=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/pipe.js"),expand=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/expand.js"),timer=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/timer.js"),withLatestFrom=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js"),concatMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/concatMap.js"),empty=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/empty.js"),mergeMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js"),from=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/from.js"),toArray=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/toArray.js"),Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js"),scan=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/scan.js"),startWith=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/startWith.js"),blastSubmisionTypeNarrowing=__webpack_require__("./src/content/app/tools/blast/utils/blastSubmisionTypeNarrowing.ts"),of=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/of.js"),catchError=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/catchError.js"),dom_fetch=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/dom/fetch.js");var blastStorageService=__webpack_require__("./src/content/app/tools/blast/services/blastStorageService.ts"),blastApiSlice=__webpack_require__("./src/content/app/tools/blast/state/blast-api/blastApiSlice.ts"),blastResultsSlice=__webpack_require__("./src/content/app/tools/blast/state/blast-results/blastResultsSlice.ts");const blastFormSubmissionEpic=action$=>action$.pipe((0,filter.p)(blastApiSlice.Ng.matchFulfilled),(0,tap.M)((action=>{const{submissionId,submission}=action.payload;(0,blastStorageService.EY)(submissionId,submission)})),(0,map.T)((action=>{const{submissionId,submission:{results}}=action.payload;return results.map((job=>({submissionId,job})))})),poll(action$),(0,tap.M)(databaseUpdaterSubject()),(0,map.T)((pollingResult=>{const{submissionId,job:{jobId,status}}=pollingResult;return(0,blastResultsSlice.lh)({submissionId,jobId,fragment:{status}})}))),blastSubmissionsRestoreEpic=action$=>action$.pipe((0,filter.p)((0,redux_toolkit_modern.sf)(blastResultsSlice.GB)),(0,take.s)(1),(0,map.T)((({payload:submissions})=>Object.entries(submissions).filter((([,submission])=>(0,blastSubmisionTypeNarrowing.Hs)(submission))).flatMap((([submissionId,submission])=>submission.results.filter((job=>"RUNNING"===job.status)).map((job=>({submissionId,job}))))))),poll(action$),(0,tap.M)(databaseUpdaterSubject()),(0,map.T)((pollingResult=>{const{submissionId,job:{jobId,status}}=pollingResult;return(0,blastResultsSlice.lh)({submissionId,jobId,fragment:{status}})}))),blastFailedSubmissionsEpic=action$=>action$.pipe((0,filter.p)(blastApiSlice.Ng.matchRejected),(0,tap.M)((action=>{const payload=action?.payload?.data||{},{submission}=payload;(0,blastSubmisionTypeNarrowing.wG)(submission)&&(0,blastStorageService.EY)(submission.id,submission)})),(0,switchMap.n)((()=>never.t))),poll=action$=>(0,pipe.F)((0,expand.f)((input=>{const runningJobsList=input.filter((({job})=>"RUNNING"===job.status));return runningJobsList.length?(0,timer.O)(15e3).pipe((0,withLatestFrom.E)(getDeletedSubmissionsStream(action$)),(0,concatMap.H)((([,deletedSubmissions])=>{const{submissionId}=runningJobsList[0];return deletedSubmissions.includes(submissionId)?empty.w:checkJobStatuses(runningJobsList)}))):empty.w})),(0,mergeMap.Z)((results=>(0,from.H)(results))),(0,filter.p)((pollingResult=>["FINISHED","FAILURE"].includes(pollingResult.job.status)))),checkJobStatuses=input=>(0,from.H)(input).pipe((0,concatMap.H)((({submissionId,job})=>{const{jobId}=job;return(url=>(0,dom_fetch.$)(url).pipe((0,switchMap.n)((response=>response.ok?response.json():(0,of.of)({error:!0,message:`Error ${response.status}`}))),(0,catchError.W)((err=>(0,of.of)({error:!0,message:err.message})))))(`${config_0.A.toolsApiBaseUrl}/blast/jobs/status/${jobId}`).pipe((0,map.T)((response=>({submissionId,job:{...job,status:"error"in response?"RUNNING":response.status}}))))})),(0,toArray.$)()),databaseUpdaterSubject=()=>(new Subject.B).pipe((0,concatMap.H)((pollingResult=>{const{submissionId,job:{jobId,status}}=pollingResult;return(0,from.H)((0,blastStorageService.ub)({submissionId,jobId,fragment:{status}}))}))),getDeletedSubmissionsStream=action$=>action$.pipe((0,filter.p)((0,redux_toolkit_modern.sf)(blastResultsSlice.EH)),(0,map.T)((action=>action.payload)),(0,scan.S)(((acc,submissionId)=>[...acc,submissionId]),[]),(0,startWith.Z)([]));(0,redux_observable.Ex)(...Object.values(speciesSelectorEpics_namespaceObject),...Object.values(blastEpics_namespaceObject));var vepApiSlice=__webpack_require__("./src/content/app/tools/vep/state/vep-api/vepApiSlice.ts"),vepSubmissionsSlice=__webpack_require__("./src/content/app/tools/vep/state/vep-submissions/vepSubmissionsSlice.ts");const unsettledSubmissionsStatuses=["SUBMITTED","RUNNING"];const vepActionListeners_vepSubmissionStatusPolling=new class VepSubmissionStatusPolling{submissions={};queue=[];isProcessing=!1;dispatch=null;enqueueSubmission=({submission,dispatch})=>{this.submissions[submission.id]=submission,this.queue.unshift(submission.id),this.dispatch=dispatch,this.isProcessing||this.processQueueWithDelay()};processQueueWithDelay=async()=>{if(!this.queue.length)return void(this.isProcessing=!1);this.isProcessing=!0,await this.pause();const submissionId=this.queue.pop(),url=`${config_0.A.toolsApiBaseUrl}/vep/submissions/${submissionId}/status`,response=await fetch(url);await this.handleResponse({submissionId,response}),this.processQueueWithDelay()};processSubmissionsOnStartup=async({submissions,dispatch})=>{this.dispatch=dispatch;for(const submission of submissions){this.submissions[submission.id]=submission;const submissionId=submission.id,url=`${config_0.A.toolsApiBaseUrl}/vep/submissions/${submissionId}/status`,response=await fetch(url);await this.handleResponse({submissionId,response})}this.processQueueWithDelay()};handleResponse=async({submissionId,response})=>{if(!response.ok)return void(response.status>=500?this.queue.unshift(submissionId):404===response.status&&this.reportSubmissionStatus({submissionId,status:"FAILED"}));const{status}=await response.json();this.submissions[submissionId]&&(status!==this.submissions[submissionId].status?(this.submissions[submissionId].status=status,this.reportSubmissionStatus({submissionId,status})):this.queue.unshift(submissionId))};reportSubmissionStatus=submission=>{this.dispatch&&(this.dispatch((0,vepSubmissionsSlice.mQ)({submissionId:submission.submissionId,fragment:{status:submission.status}})),unsettledSubmissionsStatuses.includes(submission.status)?this.queue.unshift(submission.submissionId):this.removeSubmission(submission.submissionId))};removeSubmission=submissionId=>{this.submissions[submissionId]&&delete this.submissions[submissionId];const submissionIdIndexInQueue=this.queue.findIndex((id=>id===submissionId));-1!==submissionIdIndexInQueue&&this.queue.splice(submissionIdIndexInQueue,1)};pause=async()=>new Promise((resolve=>setTimeout(resolve,15e3)))},listenerMiddlewareInstance=(vepApiSlice.o8.matchFulfilled,vepApiSlice.o8.matchRejected,vepSubmissionsSlice.Bo.fulfilled,vepSubmissionsSlice.qB.fulfilled,(0,redux_toolkit_modern.Nc)()),epicMiddleware=(listenerMiddlewareInstance.startListening,(0,redux_observable.Cw)());(0,rootReducer.A)(),graphqlApiSlice.A.middleware,restSlice.A.middleware,globalThis.__PRELOADED_STATE__;const useAppSelector=react_redux.d4;redux_toolkit_modern.zD.withTypes();var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const SpeciesCommonName_SpeciesCommonName=props=>{const{common_name,fallback}=props;if(!common_name&&!fallback)return null;const content=common_name??fallback;return(0,jsx_runtime.jsx)("span",{className:props.className,"data-part":"common-name",children:content})},species_name_parts_SpeciesCommonName=SpeciesCommonName_SpeciesCommonName;try{SpeciesCommonName_SpeciesCommonName.displayName="SpeciesCommonName",SpeciesCommonName_SpeciesCommonName.__docgenInfo={description:"",displayName:"SpeciesCommonName",props:{common_name:{defaultValue:null,description:"",name:"common_name",required:!0,type:{name:"string | null"}},fallback:{defaultValue:null,description:"",name:"fallback",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/SpeciesCommonName.tsx#SpeciesCommonName"]={docgenInfo:SpeciesCommonName_SpeciesCommonName.__docgenInfo,name:"SpeciesCommonName",path:"src/shared/components/species-name-parts/SpeciesCommonName.tsx#SpeciesCommonName"})}catch(__react_docgen_typescript_loader_error){}var injectStylesIntoStyleTag=__webpack_require__("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),injectStylesIntoStyleTag_default=__webpack_require__.n(injectStylesIntoStyleTag),styleDomAPI=__webpack_require__("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),styleDomAPI_default=__webpack_require__.n(styleDomAPI),insertBySelector=__webpack_require__("./node_modules/style-loader/dist/runtime/insertBySelector.js"),insertBySelector_default=__webpack_require__.n(insertBySelector),setAttributesWithoutAttributes=__webpack_require__("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),setAttributesWithoutAttributes_default=__webpack_require__.n(setAttributesWithoutAttributes),insertStyleElement=__webpack_require__("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),insertStyleElement_default=__webpack_require__.n(insertStyleElement),styleTagTransform=__webpack_require__("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),styleTagTransform_default=__webpack_require__.n(styleTagTransform),SpeciesNameParts_module=__webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[13].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[13].use[2]!./src/shared/components/species-name-parts/SpeciesNameParts.module.css"),options={};options.styleTagTransform=styleTagTransform_default(),options.setAttributes=setAttributesWithoutAttributes_default(),options.insert=insertBySelector_default().bind(null,"head"),options.domAPI=styleDomAPI_default(),options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(SpeciesNameParts_module.A,options);const species_name_parts_SpeciesNameParts_module=SpeciesNameParts_module.A&&SpeciesNameParts_module.A.locals?SpeciesNameParts_module.A.locals:void 0,SpeciesScientificName_SpeciesScientificName=props=>{const{scientific_name}=props,componentClasses=classnames_default()(species_name_parts_SpeciesNameParts_module.scientificName,props.className);return(0,jsx_runtime.jsx)("span",{className:componentClasses,"data-part":"scientific-name",children:scientific_name})},species_name_parts_SpeciesScientificName=SpeciesScientificName_SpeciesScientificName;try{SpeciesScientificName_SpeciesScientificName.displayName="SpeciesScientificName",SpeciesScientificName_SpeciesScientificName.__docgenInfo={description:"",displayName:"SpeciesScientificName",props:{scientific_name:{defaultValue:null,description:"",name:"scientific_name",required:!0,type:{name:"string"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/SpeciesScientificName.tsx#SpeciesScientificName"]={docgenInfo:SpeciesScientificName_SpeciesScientificName.__docgenInfo,name:"SpeciesScientificName",path:"src/shared/components/species-name-parts/SpeciesScientificName.tsx#SpeciesScientificName"})}catch(__react_docgen_typescript_loader_error){}const species_name_parts_AssemblyName=props=>{const{assembly:{name:assemblyName}}=props;return(0,jsx_runtime.jsx)("span",{className:props.className,"data-part":"assembly-name",children:assemblyName})};try{AssemblyName.displayName="AssemblyName",AssemblyName.__docgenInfo={description:"",displayName:"AssemblyName",props:{assembly:{defaultValue:null,description:"",name:"assembly",required:!0,type:{name:"{ accession_id: string; name: string; }"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/AssemblyName.tsx#AssemblyName"]={docgenInfo:AssemblyName.__docgenInfo,name:"AssemblyName",path:"src/shared/components/species-name-parts/AssemblyName.tsx#AssemblyName"})}catch(__react_docgen_typescript_loader_error){}const species_name_parts_AssemblyAccessionId=props=>{const{assembly:{accession_id:accessionId}}=props;return(0,jsx_runtime.jsx)("span",{className:props.className,"data-part":"assembly-id",children:accessionId})};try{AssemblyAccessionId.displayName="AssemblyAccessionId",AssemblyAccessionId.__docgenInfo={description:"",displayName:"AssemblyAccessionId",props:{assembly:{defaultValue:null,description:"",name:"assembly",required:!0,type:{name:"{ accession_id: string; name: string; }"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/AssemblyAccessionId.tsx#AssemblyAccessionId"]={docgenInfo:AssemblyAccessionId.__docgenInfo,name:"AssemblyAccessionId",path:"src/shared/components/species-name-parts/AssemblyAccessionId.tsx#AssemblyAccessionId"})}catch(__react_docgen_typescript_loader_error){}var upperFirst=__webpack_require__("./node_modules/lodash/upperFirst.js"),upperFirst_default=__webpack_require__.n(upperFirst);const SpeciesType_SpeciesType=props=>{const{type:speciesType,fallback=null}=props;if(!speciesType&&!fallback)return null;const content=speciesType?(0,jsx_runtime.jsxs)("span",{children:[upperFirst_default()(speciesType.kind)," - ",speciesType.value]}):fallback;return(0,jsx_runtime.jsx)("span",{className:props.className,"data-part":"type",children:content})},species_name_parts_SpeciesType=SpeciesType_SpeciesType;try{SpeciesType_SpeciesType.displayName="SpeciesType",SpeciesType_SpeciesType.__docgenInfo={description:"",displayName:"SpeciesType",props:{type:{defaultValue:null,description:"",name:"type",required:!0,type:{name:"{ kind: string; value: string; } | null"}},fallback:{defaultValue:null,description:"",name:"fallback",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/SpeciesType.tsx#SpeciesType"]={docgenInfo:SpeciesType_SpeciesType.__docgenInfo,name:"SpeciesType",path:"src/shared/components/species-name-parts/SpeciesType.tsx#SpeciesType"})}catch(__react_docgen_typescript_loader_error){}const SpeciesReference_SpeciesReference=props=>{const{is_reference}=props;if(!is_reference)return null;const componentClasses=classnames_default()(species_name_parts_SpeciesNameParts_module.reference,props.className);return(0,jsx_runtime.jsx)("span",{className:componentClasses,"data-part":"reference",children:"Reference"})},species_name_parts_SpeciesReference=SpeciesReference_SpeciesReference;try{SpeciesReference_SpeciesReference.displayName="SpeciesReference",SpeciesReference_SpeciesReference.__docgenInfo={description:"",displayName:"SpeciesReference",props:{is_reference:{defaultValue:null,description:"",name:"is_reference",required:!0,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/SpeciesReference.tsx#SpeciesReference"]={docgenInfo:SpeciesReference_SpeciesReference.__docgenInfo,name:"SpeciesReference",path:"src/shared/components/species-name-parts/SpeciesReference.tsx#SpeciesReference"})}catch(__react_docgen_typescript_loader_error){}try{SpeciesCommonName.displayName="SpeciesCommonName",SpeciesCommonName.__docgenInfo={description:"",displayName:"SpeciesCommonName",props:{common_name:{defaultValue:null,description:"",name:"common_name",required:!0,type:{name:"string | null"}},fallback:{defaultValue:null,description:"",name:"fallback",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/index.tsx#SpeciesCommonName"]={docgenInfo:SpeciesCommonName.__docgenInfo,name:"SpeciesCommonName",path:"src/shared/components/species-name-parts/index.tsx#SpeciesCommonName"})}catch(__react_docgen_typescript_loader_error){}try{SpeciesScientificName.displayName="SpeciesScientificName",SpeciesScientificName.__docgenInfo={description:"",displayName:"SpeciesScientificName",props:{scientific_name:{defaultValue:null,description:"",name:"scientific_name",required:!0,type:{name:"string"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/index.tsx#SpeciesScientificName"]={docgenInfo:SpeciesScientificName.__docgenInfo,name:"SpeciesScientificName",path:"src/shared/components/species-name-parts/index.tsx#SpeciesScientificName"})}catch(__react_docgen_typescript_loader_error){}try{SpeciesAssemblyName.displayName="SpeciesAssemblyName",SpeciesAssemblyName.__docgenInfo={description:"",displayName:"SpeciesAssemblyName",props:{assembly:{defaultValue:null,description:"",name:"assembly",required:!0,type:{name:"{ accession_id: string; name: string; }"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/index.tsx#SpeciesAssemblyName"]={docgenInfo:SpeciesAssemblyName.__docgenInfo,name:"SpeciesAssemblyName",path:"src/shared/components/species-name-parts/index.tsx#SpeciesAssemblyName"})}catch(__react_docgen_typescript_loader_error){}try{SpeciesAssemblyId.displayName="SpeciesAssemblyId",SpeciesAssemblyId.__docgenInfo={description:"",displayName:"SpeciesAssemblyId",props:{assembly:{defaultValue:null,description:"",name:"assembly",required:!0,type:{name:"{ accession_id: string; name: string; }"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/index.tsx#SpeciesAssemblyId"]={docgenInfo:SpeciesAssemblyId.__docgenInfo,name:"SpeciesAssemblyId",path:"src/shared/components/species-name-parts/index.tsx#SpeciesAssemblyId"})}catch(__react_docgen_typescript_loader_error){}try{SpeciesType.displayName="SpeciesType",SpeciesType.__docgenInfo={description:"",displayName:"SpeciesType",props:{type:{defaultValue:null,description:"",name:"type",required:!0,type:{name:"{ kind: string; value: string; } | null"}},fallback:{defaultValue:null,description:"",name:"fallback",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/index.tsx#SpeciesType"]={docgenInfo:SpeciesType.__docgenInfo,name:"SpeciesType",path:"src/shared/components/species-name-parts/index.tsx#SpeciesType"})}catch(__react_docgen_typescript_loader_error){}try{SpeciesReference.displayName="SpeciesReference",SpeciesReference.__docgenInfo={description:"",displayName:"SpeciesReference",props:{is_reference:{defaultValue:null,description:"",name:"is_reference",required:!0,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name-parts/index.tsx#SpeciesReference"]={docgenInfo:SpeciesReference.__docgenInfo,name:"SpeciesReference",path:"src/shared/components/species-name-parts/index.tsx#SpeciesReference"})}catch(__react_docgen_typescript_loader_error){}var SpeciesName_module=__webpack_require__("./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[13].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[13].use[2]!./src/shared/components/species-name/SpeciesName.module.css"),SpeciesName_module_options={};SpeciesName_module_options.styleTagTransform=styleTagTransform_default(),SpeciesName_module_options.setAttributes=setAttributesWithoutAttributes_default(),SpeciesName_module_options.insert=insertBySelector_default().bind(null,"head"),SpeciesName_module_options.domAPI=styleDomAPI_default(),SpeciesName_module_options.insertStyleElement=insertStyleElement_default();injectStylesIntoStyleTag_default()(SpeciesName_module.A,SpeciesName_module_options);const species_name_SpeciesName_module=SpeciesName_module.A&&SpeciesName_module.A.locals?SpeciesName_module.A.locals:void 0,SpeciesName=props=>{const{species,speciesNameDisplayOption,className:classNameFromProps,...otherProps}=props,componentClasses=classnames_default()(species_name_SpeciesName_module.speciesName,classNameFromProps);return(0,jsx_runtime.jsx)("span",{className:componentClasses,...otherProps,children:(0,jsx_runtime.jsx)(Content,{species,displayOption:speciesNameDisplayOption})})},Content=props=>{const{species,displayOption}=props,scientificNameClasses=classnames_default()(species_name_SpeciesName_module.prominent,species_name_SpeciesName_module.italic),scientificNameElement=(0,jsx_runtime.jsx)(species_name_parts_SpeciesScientificName,{scientific_name:species.scientific_name,className:scientificNameClasses});return"common-name_assembly-name"===displayOption?(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(species_name_parts_SpeciesCommonName,{common_name:species.common_name,fallback:scientificNameElement,className:species_name_SpeciesName_module.prominent}),(0,jsx_runtime.jsx)(species_name_parts_AssemblyName,{assembly:species.assembly,className:species_name_SpeciesName_module.assembly})]}):"common-name_type_assembly-name"===displayOption?(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(species_name_parts_SpeciesCommonName,{common_name:species.common_name,fallback:scientificNameElement,className:species_name_SpeciesName_module.prominent}),!(!species.type&&!species.is_reference)&&(0,jsx_runtime.jsxs)("span",{className:species_name_SpeciesName_module.type,children:[(0,jsx_runtime.jsx)(species_name_parts_SpeciesType,{type:species.type}),species.type&&species.is_reference&&", ",(0,jsx_runtime.jsx)(species_name_parts_SpeciesReference,{...species})]}),(0,jsx_runtime.jsx)(species_name_parts_AssemblyName,{assembly:species.assembly,className:species_name_SpeciesName_module.assembly})]}):"scientific-name_assembly-name"===displayOption?(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(species_name_parts_SpeciesScientificName,{scientific_name:species.scientific_name,className:scientificNameClasses}),(0,jsx_runtime.jsx)(species_name_parts_AssemblyName,{assembly:species.assembly,className:species_name_SpeciesName_module.assembly})]}):"scientific-name_type_assembly-name"===displayOption?(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(species_name_parts_SpeciesScientificName,{scientific_name:species.scientific_name,className:scientificNameClasses}),!(!species.type&&!species.is_reference)&&(0,jsx_runtime.jsxs)("span",{children:[(0,jsx_runtime.jsx)(species_name_parts_SpeciesType,{type:species.type}),species.type&&species.is_reference&&", ",(0,jsx_runtime.jsx)(species_name_parts_SpeciesReference,{...species,className:species_name_SpeciesName_module.italic})]}),(0,jsx_runtime.jsx)(species_name_parts_AssemblyName,{assembly:species.assembly,className:species_name_SpeciesName_module.assembly})]}):"assembly-accession-id"===displayOption?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsx)(species_name_parts_AssemblyAccessionId,{assembly:species.assembly,className:species_name_SpeciesName_module.prominent})}):void 0},species_name_SpeciesName=props=>{const speciesNameDisplayOption=useAppSelector(speciesSelectorGeneralSelectors.XC);return(0,jsx_runtime.jsx)(SpeciesName,{...props,speciesNameDisplayOption})};try{SpeciesName.displayName="SpeciesName",SpeciesName.__docgenInfo={description:"",displayName:"SpeciesName",props:{species:{defaultValue:null,description:"",name:"species",required:!0,type:{name:'Pick<CommittedItem, "type" | "common_name" | "scientific_name" | "assembly" | "is_reference">'}},speciesNameDisplayOption:{defaultValue:null,description:"",name:"speciesNameDisplayOption",required:!0,type:{name:"enum",value:[{value:'"common-name_assembly-name"'},{value:'"common-name_type_assembly-name"'},{value:'"scientific-name_assembly-name"'},{value:'"scientific-name_type_assembly-name"'},{value:'"assembly-accession-id"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/shared/components/species-name/SpeciesName.tsx#SpeciesName"]={docgenInfo:SpeciesName.__docgenInfo,name:"SpeciesName",path:"src/shared/components/species-name/SpeciesName.tsx#SpeciesName"})}catch(__react_docgen_typescript_loader_error){}},"./src/shared/constants/globals.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{T:()=>CONFIG_FIELD_ON_WINDOW});const CONFIG_FIELD_ON_WINDOW="__CONFIG__"},"./src/shared/constants/timeConstants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$0:()=>ONE_DAY_IN_MILLISECONDS,hN:()=>ONE_HOUR_IN_MILLISECONDS});const ONE_HOUR_IN_MILLISECONDS=36e5,ONE_DAY_IN_MILLISECONDS=24*ONE_HOUR_IN_MILLISECONDS},"./src/shared/helpers/environment.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Qo:()=>readEnvironment,oc:()=>isClient});var src_shared_constants_globals__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/shared/constants/globals.ts");const defaultEnvironment={buildEnvironment:"production",deploymentEnvironment:"development"},readEnvironment=()=>isClient()?window[src_shared_constants_globals__WEBPACK_IMPORTED_MODULE_0__.T]?.environment??defaultEnvironment:{buildEnvironment:globalThis.process?.env.NODE_ENV??"production",deploymentEnvironment:globalThis.process?.env.ENVIRONMENT??"development"},isClient=()=>"object"==typeof window},"./src/shared/helpers/focusObjectHelpers.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Fz:()=>buildFocusObjectId,ww:()=>parseFocusObjectId});const buildFocusObjectId=params=>{const{genomeId,type,objectId}=params;return`${genomeId}:${type}:${objectId}`},parseFocusObjectId=id=>{const match=id.match(/(.+?):(.+?):(.+)/);if(4===match?.length){const[,genomeId,type,objectId]=match;return{genomeId,type,objectId}}throw new Error("Malformed Ensembl object id")}},"./src/shared/services/generalUIStorageConstants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{U:()=>SPECIES_NAME_DISPLAY_OPTION_KEY,k:()=>GENERAL_UI_STORE_NAME});const GENERAL_UI_STORE_NAME="general-ui",SPECIES_NAME_DISPLAY_OPTION_KEY="species-name-display-option"},"./src/shared/services/previouslyViewedObjectsStorageConstants.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$p:()=>PREVIOUSLY_VIEWED_OBJECTS_STORE_NAME,kU:()=>ENTITY_VIEWER_PREFIX});const PREVIOUSLY_VIEWED_OBJECTS_STORE_NAME="previously-viewed",ENTITY_VIEWER_PREFIX="entity-viewer"},"./src/shared/services/previouslyViewedObjectsStorageService.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{VB:()=>getAllPreviouslyViewedEntities,rt:()=>savePreviouslyViewedEntities});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.map.js");var src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/services/indexeddb-service.ts"),_previouslyViewedObjectsStorageConstants__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/shared/services/previouslyViewedObjectsStorageConstants.ts");const savePreviouslyViewedObjects=async(appPrefix,genomeId,value)=>{const key=generateKey(appPrefix,genomeId);await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_3__.A.set(_previouslyViewedObjectsStorageConstants__WEBPACK_IMPORTED_MODULE_4__.$p,key,value)},getAllPreviouslyViewedObjects=async()=>{const transaction=(await src_services_indexeddb_service__WEBPACK_IMPORTED_MODULE_3__.A.getDB()).transaction(_previouslyViewedObjectsStorageConstants__WEBPACK_IMPORTED_MODULE_4__.$p),map=new Map;for await(const cursor of transaction.store){const cursorKey=cursor.key;map.set(cursorKey,cursor.value)}return map},generateKey=(appPrefix,genomeId)=>[appPrefix,genomeId],getGenomeIdFromKey=key=>key[1],getAppNameFromKey=key=>key[0],savePreviouslyViewedEntities=async(genomeId,objects)=>{await savePreviouslyViewedObjects(_previouslyViewedObjectsStorageConstants__WEBPACK_IMPORTED_MODULE_4__.kU,genomeId,objects)},getAllPreviouslyViewedEntities=async()=>{const objectsViewedInGenomeBrowser=[...(await getAllPreviouslyViewedObjects()).entries()].filter((([key])=>getAppNameFromKey(key)===_previouslyViewedObjectsStorageConstants__WEBPACK_IMPORTED_MODULE_4__.kU)),objectsByGenome={};for(const[key,objects]of objectsViewedInGenomeBrowser){const genomeId=getGenomeIdFromKey(key),validObjects=objects.filter(isPreviouslyViewedEntity);objectsByGenome[genomeId]=validObjects}return objectsByGenome},isPreviouslyViewedEntity=object=>{const expectedFields=["id","urlId","type","label"];for(const key of expectedFields)if(object&&"object"==typeof object&&!(key in object))return!1;return!0}},"./src/shared/state/api-slices/graphqlApiSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs"),graphql_request__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/graphql-request/build/esm/index.js");const __WEBPACK_DEFAULT_EXPORT__=(0,_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_1__.xP)({reducerPath:"graphqlApi",baseQuery:async({body,url,variables={}})=>{try{return{data:await(0,graphql_request__WEBPACK_IMPORTED_MODULE_0__.Em)(url,body,variables)}}catch(error){if(error instanceof graphql_request__WEBPACK_IMPORTED_MODULE_0__.MZ){const{name,message,stack,request,response}=error;return{error:{status:response.status,meta:{data:response.data??null,errors:response.errors},name,message,stack},meta:{request,response}}}return{error:{status:500,meta:{error:error.message}}}}},endpoints:()=>({})})},"./src/shared/state/api-slices/restSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var _reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/query/rtk-query.modern.mjs"),_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@reduxjs/toolkit/dist/query/react/rtk-query-react.modern.mjs");const staggeredBaseQueryWithBailout=(0,_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__.L5)((async(args,api,extraOptions)=>{const result=await(0,_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__.cw)({baseUrl:"/"})(args,api,extraOptions);return Number(result.error?.status)<500&&_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_0__.L5.fail(result.error),result}),{maxRetries:5}),__WEBPACK_DEFAULT_EXPORT__=(0,_reduxjs_toolkit_query_react__WEBPACK_IMPORTED_MODULE_1__.xP)({reducerPath:"restApi",baseQuery:staggeredBaseQueryWithBailout,endpoints:()=>({})})},"./src/shared/state/genome/genomeApiSlice.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{TV:()=>fetchExampleObjectsForGenome,uZ:()=>fetchGenomeSummary});var config__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./config.ts");const genomeApiSlice=__webpack_require__("./src/shared/state/api-slices/restSlice.ts").A.injectEndpoints({endpoints:builder=>({genomeSummaryByGenomeSlug:builder.query({query:slug=>({url:`${config__WEBPACK_IMPORTED_MODULE_0__.A.metadataApiBaseUrl}/genome/${slug}/explain`})}),genomeKaryotype:builder.query({query:genomeId=>({url:`${config__WEBPACK_IMPORTED_MODULE_0__.A.metadataApiBaseUrl}/genome/${genomeId}/karyotype`})}),exampleObjectsForGenome:builder.query({query:genomeId=>({url:`${config__WEBPACK_IMPORTED_MODULE_0__.A.metadataApiBaseUrl}/genome/${genomeId}/example_objects`})})})}),{useGenomeSummaryByGenomeSlugQuery,useGenomeKaryotypeQuery,useExampleObjectsForGenomeQuery}=genomeApiSlice,{genomeSummaryByGenomeSlug:fetchGenomeSummary,exampleObjectsForGenome:fetchExampleObjectsForGenome}=genomeApiSlice.endpoints},"./src/shared/state/genome/genomeSelectors.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{pB:()=>getGenomes});__webpack_require__("./node_modules/core-js/modules/es.iterator.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.iterator.find.js");const getGenomes=state=>state.genome.genomes},"./src/shared/types/loading-state.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{G:()=>LoadingState});let LoadingState=function(LoadingState){return LoadingState.NOT_REQUESTED="not requested",LoadingState.LOADING="loading",LoadingState.SUCCESS="success",LoadingState.ERROR="error",LoadingState}({})},"./src/shared/types/status.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{n:()=>Status});let Status=function(Status){return Status.DEFAULT="default",Status.SELECTED="selected",Status.UNSELECTED="unselected",Status.DISABLED="disabled",Status.PARTIALLY_SELECTED="partially selected",Status.OPEN="open",Status.CLOSED="closed",Status}({})}}]);
//# sourceMappingURL=7024.9fa10ed8.iframe.bundle.js.map