{"version":3,"file":"main.d914eb61c7b8e3010875.bundle.js","sources":["webpack:///./src/shared/accordion/helpers/AccordionStore.ts"],"sourcesContent":["import { UUID } from '../components/ItemContext';\n\nexport interface InjectedPanelAttributes {\n  role: string | undefined;\n  'aria-hidden': boolean | undefined;\n  'aria-labelledby': string;\n  id: string;\n  hidden: boolean | undefined;\n}\n\nexport interface InjectedHeadingAttributes {\n  role: string;\n}\n\nexport interface InjectedButtonAttributes {\n  id: string;\n  'aria-controls': string;\n  'aria-expanded': boolean;\n  'aria-disabled': boolean;\n  role: string;\n  tabIndex: number;\n}\n\nexport default class AccordionStore {\n  public readonly expanded: UUID[];\n  public readonly allowMultipleExpanded: boolean;\n  public readonly allowZeroExpanded: boolean;\n\n  constructor({\n    expanded = [],\n    allowMultipleExpanded = false,\n    allowZeroExpanded = false\n  }: {\n    expanded?: UUID[];\n    allowMultipleExpanded?: boolean;\n    allowZeroExpanded?: boolean;\n  }) {\n    this.expanded = expanded;\n    this.allowMultipleExpanded = allowMultipleExpanded;\n    this.allowZeroExpanded = allowZeroExpanded;\n  }\n\n  public readonly toggleExpanded = (uuid: UUID): AccordionStore => {\n    if (this.isItemDisabled(uuid)) {\n      return this;\n    }\n    const isExpanded = this.isItemExpanded(uuid);\n\n    if (!isExpanded) {\n      return this.augment({\n        expanded: this.allowMultipleExpanded ? [...this.expanded, uuid] : [uuid]\n      });\n    } else {\n      return this.augment({\n        expanded: this.expanded.filter(\n          (expandedUuid: UUID): boolean => expandedUuid !== uuid\n        )\n      });\n    }\n  };\n\n  public readonly isItemDisabled = (uuid: UUID): boolean => {\n    const isExpanded = this.isItemExpanded(uuid);\n    const isOnlyOneExpanded = this.expanded.length === 1;\n\n    return Boolean(isExpanded && !this.allowZeroExpanded && isOnlyOneExpanded);\n  };\n\n  public readonly isItemExpanded = (uuid: UUID): boolean => {\n    return this.expanded.includes(uuid);\n  };\n\n  public readonly getPanelAttributes = (\n    uuid: UUID\n  ): InjectedPanelAttributes => {\n    const expanded = this.isItemExpanded(uuid);\n\n    return {\n      'aria-hidden': this.allowMultipleExpanded ? !expanded : undefined,\n      'aria-labelledby': this.getButtonId(uuid),\n      hidden: expanded ? undefined : true,\n      id: this.getPanelId(uuid),\n      role: this.allowMultipleExpanded ? undefined : 'region'\n    };\n  };\n\n  public readonly getHeadingAttributes = (): InjectedHeadingAttributes => {\n    return {\n      role: 'heading'\n    };\n  };\n\n  public readonly getButtonAttributes = (\n    uuid: UUID\n  ): InjectedButtonAttributes => {\n    const expanded = this.isItemExpanded(uuid);\n    const disabled = this.isItemDisabled(uuid);\n\n    return {\n      'aria-controls': this.getPanelId(uuid),\n      'aria-disabled': disabled,\n      'aria-expanded': expanded,\n      id: this.getButtonId(uuid),\n      role: 'button',\n      tabIndex: 0\n    };\n  };\n\n  private readonly getPanelId = (uuid: UUID): string =>\n    `accordion__panel-${uuid}`;\n\n  private readonly getButtonId = (uuid: UUID): string =>\n    `accordion__heading-${uuid}`;\n\n  private readonly augment = (args: {\n    expanded?: UUID[];\n    allowMultipleExpanded?: boolean;\n    allowZeroExpanded?: boolean;\n  }): AccordionStore => {\n    return new AccordionStore({\n      allowMultipleExpanded: this.allowMultipleExpanded,\n      allowZeroExpanded: this.allowZeroExpanded,\n      expanded: this.expanded,\n      ...args\n    });\n  };\n}\n"],"mappings":"AAuBA","sourceRoot":""}