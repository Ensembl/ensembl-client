{"version":3,"file":"main.3a9078fe52b9e34a5089.bundle.js","sources":["webpack:///./src/shared/dropdown/Dropdown.tsx"],"sourcesContent":["import React, { ReactNode, useRef, useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport styles from './Dropdown.scss';\n\ntype Props = {\n  expandDirection: 'up' | 'down';\n  tipPosition: 'left' | 'center' | 'right';\n  verticalOffset: number; // distance (in px) between the end of the tip and the parent element\n  autoAdjust: boolean; // try to adapt position so as not to extend beyond screen bounds\n  children: ReactNode;\n  onClose: () => void;\n};\n\ntype DropdownParentElementState = HTMLElement | null;\ntype InlineStylesState = { top?: string; left?: string };\n\nconst TIP_WIDTH = 18;\nconst TIP_HEIGHT = 10;\nconst TIP_HORIZONTAL_OFFSET = 20; // distance from the side of the dropdown to the beginning of tip\n\nconst Dropdown = (props: Props) => {\n  const [parent, setParent] = useState<DropdownParentElementState>(null);\n  const [inlineStyles, setInlineStyles] = useState<InlineStylesState>({});\n  const dropdownElementRef: React.RefObject<HTMLDivElement> = useRef(null);\n\n  const handleClickInside = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n  };\n\n  const handleClickOutside = (e: Event) => {\n    if (!parent) return;\n\n    let target;\n    if (e.type === 'touchend' && (e as TouchEvent).touches) {\n      target = (e as TouchEvent).touches[0];\n    } else {\n      target = e.target;\n    }\n\n    if (target instanceof HTMLElement && !parent.contains(target)) {\n      props.onClose();\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside, true);\n    document.addEventListener('touchend', handleClickOutside, true);\n    return function cleanup() {\n      document.removeEventListener('click', handleClickOutside, true);\n      document.removeEventListener('touchend', handleClickOutside, true);\n    };\n  });\n\n  useEffect(() => {\n    if (dropdownElementRef.current) {\n      const parentElement = dropdownElementRef.current.parentElement;\n      if (!parentElement) return;\n      setParent(parentElement);\n\n      const {\n        width: parentWidth,\n        height: parentHeight\n      } = parentElement.getBoundingClientRect();\n      // calculate the x-coordinate of the dropdown,\n      // so that its tip points to the center of the parent\n      const x = parentWidth / 2 - TIP_HORIZONTAL_OFFSET - TIP_WIDTH / 2;\n      setInlineStyles({\n        top: `${parentHeight + TIP_HEIGHT + props.verticalOffset}px`,\n        left: `${x}px`\n      });\n    }\n  }, []);\n\n  const className = classNames(styles.dropdown, {\n    [styles.dropdownInvisible]: !parent\n  });\n\n  return (\n    <div\n      className={className}\n      ref={dropdownElementRef}\n      style={inlineStyles}\n      onClick={handleClickInside}\n    >\n      <DropdownTip />\n      {props.children}\n    </div>\n  );\n};\n\nDropdown.defaultProps = {\n  autoAdjust: false,\n  expandDirection: 'down',\n  tipPosition: 'left',\n  verticalOffset: 0\n};\n\nconst DropdownTip = () => {\n  const tipEndX = TIP_WIDTH / 2;\n  const polygonPoints = `0,${TIP_HEIGHT} ${TIP_WIDTH},${TIP_HEIGHT} ${tipEndX},0`;\n  const inlineStyles = {\n    top: `-${TIP_HEIGHT}px`\n  };\n\n  return (\n    <svg\n      className={styles.dropdownTooltip}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n      viewBox={`0 0 ${TIP_WIDTH} ${TIP_HEIGHT}`}\n      style={inlineStyles}\n    >\n      <polygon points={polygonPoints} />\n    </svg>\n  );\n};\n\nexport default Dropdown;\n"],"mappings":"AAiBA","sourceRoot":""}